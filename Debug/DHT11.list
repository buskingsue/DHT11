
DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049fc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004b9c  08004b9c  00005b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c78  08004c78  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004c78  08004c78  00005c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c80  08004c80  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c80  08004c80  00005c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c84  08004c84  00005c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004c88  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000068  08004cf0  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08004cf0  000062d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f320  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000278d  00000000  00000000  000153b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00017b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8b  00000000  00000000  000188f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018079  00000000  00000000  00019383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a5e  00000000  00000000  000313fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009020e  00000000  00000000  00042e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3068  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f3c  00000000  00000000  000d30ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003b  00000000  00000000  000d6fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b84 	.word	0x08004b84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004b84 	.word	0x08004b84

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <delay_us>:
 *      Author: user
 */
#include "delay_us.h"

void delay_us(uint16_t us)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim11, 0);
 800057a:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <delay_us+0x30>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2200      	movs	r2, #0
 8000580:	625a      	str	r2, [r3, #36]	@ 0x24
  while((__HAL_TIM_GET_COUNTER(&htim11)) < us);
 8000582:	bf00      	nop
 8000584:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <delay_us+0x30>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	429a      	cmp	r2, r3
 800058e:	d3f9      	bcc.n	8000584 <delay_us+0x14>
}
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000090 	.word	0x20000090

080005a4 <dht11Init>:


#include "dht11.h"

void dht11Init(DHT11 *dht, GPIO_TypeDef *port, uint16_t pin)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	4613      	mov	r3, r2
 80005b0:	80fb      	strh	r3, [r7, #6]
  dht->port = port;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	68ba      	ldr	r2, [r7, #8]
 80005b6:	601a      	str	r2, [r3, #0]
  dht->pin = pin;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	88fa      	ldrh	r2, [r7, #6]
 80005bc:	809a      	strh	r2, [r3, #4]
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <dht11GpioMode>:


// DHT11 GPIO Mode 함수설정

void dht11GpioMode(DHT11 *dht, uint8_t mode)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b088      	sub	sp, #32
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	70fb      	strb	r3, [r7, #3]
  GPIO_InitTypeDef GPIO_InitStruct = {0}; // GPIO 구조체 변수 선언 및 초기화
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]


  if(mode == OUTPUT)
 80005e6:	78fb      	ldrb	r3, [r7, #3]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d111      	bne.n	8000610 <dht11GpioMode+0x46>
  {
    //출력모드 설정
    GPIO_InitStruct.Pin = dht->pin;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	889b      	ldrh	r3, [r3, #4]
 80005f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005fa:	2302      	movs	r3, #2
 80005fc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f107 020c 	add.w	r2, r7, #12
 8000606:	4611      	mov	r1, r2
 8000608:	4618      	mov	r0, r3
 800060a:	f001 fa49 	bl	8001aa0 <HAL_GPIO_Init>
     GPIO_InitStruct.Pull = GPIO_NOPULL;
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
     HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
  }

}
 800060e:	e013      	b.n	8000638 <dht11GpioMode+0x6e>
  else if(mode == INPUT)
 8000610:	78fb      	ldrb	r3, [r7, #3]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d110      	bne.n	8000638 <dht11GpioMode+0x6e>
     GPIO_InitStruct.Pin = dht->pin;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	889b      	ldrh	r3, [r3, #4]
 800061a:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000624:	2302      	movs	r3, #2
 8000626:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f107 020c 	add.w	r2, r7, #12
 8000630:	4611      	mov	r1, r2
 8000632:	4618      	mov	r0, r3
 8000634:	f001 fa34 	bl	8001aa0 <HAL_GPIO_Init>
}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <dht11Read>:

uint8_t dht11Read(DHT11 *dht)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b090      	sub	sp, #64	@ 0x40
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  bool ret = true; // 기본 반환값 설정
 8000648:	2301      	movs	r3, #1
 800064a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  uint16_t timeTick = 0; // 시간측정변수선언및초기화
 800064e:	2300      	movs	r3, #0
 8000650:	867b      	strh	r3, [r7, #50]	@ 0x32
  uint8_t pluse[40] = {0}; //40비트 데이터를 저장 ...
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2224      	movs	r2, #36	@ 0x24
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fd0c 	bl	800407c <memset>

  //온 , 습도 데이터 변수 선언 및 초기화
  uint8_t humValue1 = 0, humValue2 = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800066a:	2300      	movs	r3, #0
 800066c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  uint8_t tempValue1 = 0, tempValue2 = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8000676:	2300      	movs	r3, #0
 8000678:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  uint8_t parityValue = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

  // 타이머 시작
  HAL_TIM_Base_Start(&htim11);
 8000682:	48a4      	ldr	r0, [pc, #656]	@ (8000914 <dht11Read+0x2d4>)
 8000684:	f002 f8aa 	bl	80027dc <HAL_TIM_Base_Start>

  //통신 시작 신호 전송
  dht11GpioMode(dht, OUTPUT);         //GPIO를 출력으로 선언
 8000688:	2101      	movs	r1, #1
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff ff9d 	bl	80005ca <dht11GpioMode>
  HAL_GPIO_WritePin(dht->port, dht->pin, 0);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	889b      	ldrh	r3, [r3, #4]
 8000698:	2200      	movs	r2, #0
 800069a:	4619      	mov	r1, r3
 800069c:	f001 fb9c 	bl	8001dd8 <HAL_GPIO_WritePin>
  HAL_Delay(20);      // 적어도 18ms 이상 대기
 80006a0:	2014      	movs	r0, #20
 80006a2:	f000 fd4b 	bl	800113c <HAL_Delay>
  HAL_GPIO_WritePin(dht->port, dht->pin, 1);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	889b      	ldrh	r3, [r3, #4]
 80006ae:	2201      	movs	r2, #1
 80006b0:	4619      	mov	r1, r3
 80006b2:	f001 fb91 	bl	8001dd8 <HAL_GPIO_WritePin>
  delay_us(20);
 80006b6:	2014      	movs	r0, #20
 80006b8:	f7ff ff5a 	bl	8000570 <delay_us>
  dht11GpioMode(dht, INPUT);          // INPUT 모드로 전환
 80006bc:	2100      	movs	r1, #0
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f7ff ff83 	bl	80005ca <dht11GpioMode>


  // DHT11 의 응답신호 대기
  __HAL_TIM_SET_COUNTER(&htim11, 0);
 80006c4:	4b93      	ldr	r3, [pc, #588]	@ (8000914 <dht11Read+0x2d4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2200      	movs	r2, #0
 80006ca:	625a      	str	r2, [r3, #36]	@ 0x24
  while(HAL_GPIO_ReadPin(dht->port,dht->pin)==GPIO_PIN_RESET)
 80006cc:	e008      	b.n	80006e0 <dht11Read+0xa0>
  {
    if(__HAL_TIM_GET_COUNTER(&htim11) > 100) // 타임아웃 체크
 80006ce:	4b91      	ldr	r3, [pc, #580]	@ (8000914 <dht11Read+0x2d4>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d4:	2b64      	cmp	r3, #100	@ 0x64
 80006d6:	d903      	bls.n	80006e0 <dht11Read+0xa0>
    {
      printf("LOW Signal Time OUT\n\r");
 80006d8:	488f      	ldr	r0, [pc, #572]	@ (8000918 <dht11Read+0x2d8>)
 80006da:	f003 fb87 	bl	8003dec <iprintf>
      break;
 80006de:	e00a      	b.n	80006f6 <dht11Read+0xb6>
  while(HAL_GPIO_ReadPin(dht->port,dht->pin)==GPIO_PIN_RESET)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	889b      	ldrh	r3, [r3, #4]
 80006e8:	4619      	mov	r1, r3
 80006ea:	4610      	mov	r0, r2
 80006ec:	f001 fb5c 	bl	8001da8 <HAL_GPIO_ReadPin>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0eb      	beq.n	80006ce <dht11Read+0x8e>
    }
  }

  __HAL_TIM_SET_COUNTER(&htim11, 0);
 80006f6:	4b87      	ldr	r3, [pc, #540]	@ (8000914 <dht11Read+0x2d4>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	@ 0x24
  while(HAL_GPIO_ReadPin(dht->port,dht->pin)==GPIO_PIN_SET)
 80006fe:	e008      	b.n	8000712 <dht11Read+0xd2>
  {
    if(__HAL_TIM_GET_COUNTER(&htim11) > 100) // 타임아웃 체크
 8000700:	4b84      	ldr	r3, [pc, #528]	@ (8000914 <dht11Read+0x2d4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000706:	2b64      	cmp	r3, #100	@ 0x64
 8000708:	d903      	bls.n	8000712 <dht11Read+0xd2>
    {
      printf("HIGH Signal Time OUT\n\r");
 800070a:	4884      	ldr	r0, [pc, #528]	@ (800091c <dht11Read+0x2dc>)
 800070c:	f003 fb6e 	bl	8003dec <iprintf>
      break;
 8000710:	e00a      	b.n	8000728 <dht11Read+0xe8>
  while(HAL_GPIO_ReadPin(dht->port,dht->pin)==GPIO_PIN_SET)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	889b      	ldrh	r3, [r3, #4]
 800071a:	4619      	mov	r1, r3
 800071c:	4610      	mov	r0, r2
 800071e:	f001 fb43 	bl	8001da8 <HAL_GPIO_ReadPin>
 8000722:	4603      	mov	r3, r0
 8000724:	2b01      	cmp	r3, #1
 8000726:	d0eb      	beq.n	8000700 <dht11Read+0xc0>
    }
  }


  for(uint8_t i = 0; i < 40; i++)
 8000728:	2300      	movs	r3, #0
 800072a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 800072e:	e03f      	b.n	80007b0 <dht11Read+0x170>
  {
    while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET); //50us 잡아줄거야
 8000730:	bf00      	nop
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	889b      	ldrh	r3, [r3, #4]
 800073a:	4619      	mov	r1, r3
 800073c:	4610      	mov	r0, r2
 800073e:	f001 fb33 	bl	8001da8 <HAL_GPIO_ReadPin>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d0f4      	beq.n	8000732 <dht11Read+0xf2>

    __HAL_TIM_SET_COUNTER(&htim11, 0);
 8000748:	4b72      	ldr	r3, [pc, #456]	@ (8000914 <dht11Read+0x2d4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2200      	movs	r2, #0
 800074e:	625a      	str	r2, [r3, #36]	@ 0x24
    while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET) //HIGH신호 대기
 8000750:	e01e      	b.n	8000790 <dht11Read+0x150>
    {
     timeTick = __HAL_TIM_GET_COUNTER(&htim11);
 8000752:	4b70      	ldr	r3, [pc, #448]	@ (8000914 <dht11Read+0x2d4>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000758:	867b      	strh	r3, [r7, #50]	@ 0x32

     // 신호 길이 판별
     if(timeTick > 20 && timeTick < 30)   //26~28us -> '0'
 800075a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800075c:	2b14      	cmp	r3, #20
 800075e:	d90a      	bls.n	8000776 <dht11Read+0x136>
 8000760:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000762:	2b1d      	cmp	r3, #29
 8000764:	d807      	bhi.n	8000776 <dht11Read+0x136>
     {
       pluse[i] = 0;
 8000766:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800076a:	3340      	adds	r3, #64	@ 0x40
 800076c:	443b      	add	r3, r7
 800076e:	2200      	movs	r2, #0
 8000770:	f803 2c38 	strb.w	r2, [r3, #-56]
 8000774:	e00c      	b.n	8000790 <dht11Read+0x150>
     }
     else if(timeTick > 65 && timeTick < 85)
 8000776:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000778:	2b41      	cmp	r3, #65	@ 0x41
 800077a:	d909      	bls.n	8000790 <dht11Read+0x150>
 800077c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800077e:	2b54      	cmp	r3, #84	@ 0x54
 8000780:	d806      	bhi.n	8000790 <dht11Read+0x150>
     {
       pluse[i] = 1;
 8000782:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000786:	3340      	adds	r3, #64	@ 0x40
 8000788:	443b      	add	r3, r7
 800078a:	2201      	movs	r2, #1
 800078c:	f803 2c38 	strb.w	r2, [r3, #-56]
    while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET) //HIGH신호 대기
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	889b      	ldrh	r3, [r3, #4]
 8000798:	4619      	mov	r1, r3
 800079a:	4610      	mov	r0, r2
 800079c:	f001 fb04 	bl	8001da8 <HAL_GPIO_ReadPin>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d0d5      	beq.n	8000752 <dht11Read+0x112>
  for(uint8_t i = 0; i < 40; i++)
 80007a6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80007aa:	3301      	adds	r3, #1
 80007ac:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80007b0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80007b4:	2b27      	cmp	r3, #39	@ 0x27
 80007b6:	d9bb      	bls.n	8000730 <dht11Read+0xf0>
     }
    }
  }
  HAL_TIM_Base_Stop(&htim11);
 80007b8:	4856      	ldr	r0, [pc, #344]	@ (8000914 <dht11Read+0x2d4>)
 80007ba:	f002 f869 	bl	8002890 <HAL_TIM_Base_Stop>

  // 온습도 데이터 처리
  for(uint8_t i = 0; i<8; i++) {humValue1 = (humValue1 << 1) + pluse[i];} //습도 상위 8비트
 80007be:	2300      	movs	r3, #0
 80007c0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80007c4:	e011      	b.n	80007ea <dht11Read+0x1aa>
 80007c6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80007d2:	3340      	adds	r3, #64	@ 0x40
 80007d4:	443b      	add	r3, r7
 80007d6:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80007da:	4413      	add	r3, r2
 80007dc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80007e0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80007e4:	3301      	adds	r3, #1
 80007e6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80007ea:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80007ee:	2b07      	cmp	r3, #7
 80007f0:	d9e9      	bls.n	80007c6 <dht11Read+0x186>
  for(uint8_t i = 8; i<16; i++) {humValue2 = (humValue2 << 1) + pluse[i];}//습도 하위 8비트
 80007f2:	2308      	movs	r3, #8
 80007f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80007f8:	e011      	b.n	800081e <dht11Read+0x1de>
 80007fa:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	b2da      	uxtb	r2, r3
 8000802:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000806:	3340      	adds	r3, #64	@ 0x40
 8000808:	443b      	add	r3, r7
 800080a:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800080e:	4413      	add	r3, r2
 8000810:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8000814:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000818:	3301      	adds	r3, #1
 800081a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800081e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000822:	2b0f      	cmp	r3, #15
 8000824:	d9e9      	bls.n	80007fa <dht11Read+0x1ba>
  for(uint8_t i = 16; i<24; i++) {tempValue1 = (tempValue1 << 1) + pluse[i];}//온도 상위 8비트
 8000826:	2310      	movs	r3, #16
 8000828:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800082c:	e011      	b.n	8000852 <dht11Read+0x212>
 800082e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	b2da      	uxtb	r2, r3
 8000836:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800083a:	3340      	adds	r3, #64	@ 0x40
 800083c:	443b      	add	r3, r7
 800083e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000842:	4413      	add	r3, r2
 8000844:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8000848:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800084c:	3301      	adds	r3, #1
 800084e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8000852:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000856:	2b17      	cmp	r3, #23
 8000858:	d9e9      	bls.n	800082e <dht11Read+0x1ee>
  for(uint8_t i = 24; i<32; i++) {tempValue2 = (tempValue2 << 1) + pluse[i];}//온도 하위 8비트
 800085a:	2318      	movs	r3, #24
 800085c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8000860:	e011      	b.n	8000886 <dht11Read+0x246>
 8000862:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	b2da      	uxtb	r2, r3
 800086a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800086e:	3340      	adds	r3, #64	@ 0x40
 8000870:	443b      	add	r3, r7
 8000872:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000876:	4413      	add	r3, r2
 8000878:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800087c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000880:	3301      	adds	r3, #1
 8000882:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8000886:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800088a:	2b1f      	cmp	r3, #31
 800088c:	d9e9      	bls.n	8000862 <dht11Read+0x222>
  for(uint8_t i = 32; i<40; i++) {parityValue = (parityValue << 1) + pluse[i];}//패리티 8비트
 800088e:	2320      	movs	r3, #32
 8000890:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8000894:	e011      	b.n	80008ba <dht11Read+0x27a>
 8000896:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	b2da      	uxtb	r2, r3
 800089e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80008a2:	3340      	adds	r3, #64	@ 0x40
 80008a4:	443b      	add	r3, r7
 80008a6:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80008aa:	4413      	add	r3, r2
 80008ac:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80008b0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80008b4:	3301      	adds	r3, #1
 80008b6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80008ba:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80008be:	2b27      	cmp	r3, #39	@ 0x27
 80008c0:	d9e9      	bls.n	8000896 <dht11Read+0x256>

  //구조체에 온습도 값 저장
  dht->temperature = tempValue1;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80008c8:	719a      	strb	r2, [r3, #6]
  dht->humidity = humValue1;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80008d0:	71da      	strb	r2, [r3, #7]

  //데이터 무결성 검증
  uint8_t checkSum = humValue1 + humValue2 + tempValue1 + tempValue2;
 80008d2:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80008d6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80008da:	4413      	add	r3, r2
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80008e2:	4413      	add	r3, r2
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80008ea:	4413      	add	r3, r2
 80008ec:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  if(checkSum != parityValue)
 80008f0:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 80008f4:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d005      	beq.n	8000908 <dht11Read+0x2c8>
  {
    printf("CheckSum Error\r\n");
 80008fc:	4808      	ldr	r0, [pc, #32]	@ (8000920 <dht11Read+0x2e0>)
 80008fe:	f003 fadd 	bl	8003ebc <puts>
    ret = false;
 8000902:	2300      	movs	r3, #0
 8000904:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return ret;
 8000908:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800090c:	4618      	mov	r0, r3
 800090e:	3740      	adds	r7, #64	@ 0x40
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000090 	.word	0x20000090
 8000918:	08004b9c 	.word	0x08004b9c
 800091c:	08004bb4 	.word	0x08004bb4
 8000920:	08004bcc 	.word	0x08004bcc

08000924 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <MX_DMA_Init+0x3c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a0b      	ldr	r2, [pc, #44]	@ (8000960 <MX_DMA_Init+0x3c>)
 8000934:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <MX_DMA_Init+0x3c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	2010      	movs	r0, #16
 800094c:	f000 fcf5 	bl	800133a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000950:	2010      	movs	r0, #16
 8000952:	f000 fd0e 	bl	8001372 <HAL_NVIC_EnableIRQ>

}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	@ 0x28
 8000968:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	4a2b      	ldr	r2, [pc, #172]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 8000984:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000988:	6313      	str	r3, [r2, #48]	@ 0x30
 800098a:	4b29      	ldr	r3, [pc, #164]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b25      	ldr	r3, [pc, #148]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	4a24      	ldr	r2, [pc, #144]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a6:	4b22      	ldr	r3, [pc, #136]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a1d      	ldr	r2, [pc, #116]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a16      	ldr	r2, [pc, #88]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <MX_GPIO_Init+0xcc>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2110      	movs	r1, #16
 80009ee:	4811      	ldr	r0, [pc, #68]	@ (8000a34 <MX_GPIO_Init+0xd0>)
 80009f0:	f001 f9f2 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009f4:	2310      	movs	r3, #16
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a00:	2302      	movs	r3, #2
 8000a02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480a      	ldr	r0, [pc, #40]	@ (8000a34 <MX_GPIO_Init+0xd0>)
 8000a0c:	f001 f848 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a10:	2320      	movs	r3, #32
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <MX_GPIO_Init+0xd0>)
 8000a24:	f001 f83c 	bl	8001aa0 <HAL_GPIO_Init>

}
 8000a28:	bf00      	nop
 8000a2a:	3728      	adds	r7, #40	@ 0x28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020800 	.word	0x40020800

08000a38 <__io_putchar>:
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000a40:	1d39      	adds	r1, r7, #4
 8000a42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a46:	2201      	movs	r2, #1
 8000a48:	4803      	ldr	r0, [pc, #12]	@ (8000a58 <__io_putchar+0x20>)
 8000a4a:	f002 f95b 	bl	8002d04 <HAL_UART_Transmit>

  return ch;
 8000a4e:	687b      	ldr	r3, [r7, #4]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200000d8 	.word	0x200000d8

08000a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a60:	f000 fafa 	bl	8001058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a64:	f000 f82e 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a68:	f7ff ff7c 	bl	8000964 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a6c:	f7ff ff5a 	bl	8000924 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a70:	f000 fa1c 	bl	8000eac <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8000a74:	f000 f9ce 	bl	8000e14 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  dht11Init(&dht, GPIOC, GPIO_PIN_4);
 8000a78:	2210      	movs	r2, #16
 8000a7a:	490e      	ldr	r1, [pc, #56]	@ (8000ab4 <main+0x58>)
 8000a7c:	480e      	ldr	r0, [pc, #56]	@ (8000ab8 <main+0x5c>)
 8000a7e:	f7ff fd91 	bl	80005a4 <dht11Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  //DHT11 데이터 읽기
    if(dht11Read(&dht)) //성공적으로 읽으면 true 반환
 8000a82:	480d      	ldr	r0, [pc, #52]	@ (8000ab8 <main+0x5c>)
 8000a84:	f7ff fddc 	bl	8000640 <dht11Read>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d009      	beq.n	8000aa2 <main+0x46>
    {
      printf("Temperature : %d C,    Huminity : %d %% \r\n", dht.temperature, dht.humidity);
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <main+0x5c>)
 8000a90:	799b      	ldrb	r3, [r3, #6]
 8000a92:	4619      	mov	r1, r3
 8000a94:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <main+0x5c>)
 8000a96:	79db      	ldrb	r3, [r3, #7]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4808      	ldr	r0, [pc, #32]	@ (8000abc <main+0x60>)
 8000a9c:	f003 f9a6 	bl	8003dec <iprintf>
 8000aa0:	e002      	b.n	8000aa8 <main+0x4c>
    }
    else
    {
      printf("Failed Read Data from DHT11\n");
 8000aa2:	4807      	ldr	r0, [pc, #28]	@ (8000ac0 <main+0x64>)
 8000aa4:	f003 fa0a 	bl	8003ebc <puts>
    }

    HAL_Delay(2000);
 8000aa8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000aac:	f000 fb46 	bl	800113c <HAL_Delay>
    if(dht11Read(&dht)) //성공적으로 읽으면 true 반환
 8000ab0:	e7e7      	b.n	8000a82 <main+0x26>
 8000ab2:	bf00      	nop
 8000ab4:	40020800 	.word	0x40020800
 8000ab8:	20000084 	.word	0x20000084
 8000abc:	08004bdc 	.word	0x08004bdc
 8000ac0:	08004c08 	.word	0x08004c08

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b094      	sub	sp, #80	@ 0x50
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0320 	add.w	r3, r7, #32
 8000ace:	2230      	movs	r2, #48	@ 0x30
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f003 fad2 	bl	800407c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	4b27      	ldr	r3, [pc, #156]	@ (8000b8c <SystemClock_Config+0xc8>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af0:	4a26      	ldr	r2, [pc, #152]	@ (8000b8c <SystemClock_Config+0xc8>)
 8000af2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000af6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af8:	4b24      	ldr	r3, [pc, #144]	@ (8000b8c <SystemClock_Config+0xc8>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	4b21      	ldr	r3, [pc, #132]	@ (8000b90 <SystemClock_Config+0xcc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a20      	ldr	r2, [pc, #128]	@ (8000b90 <SystemClock_Config+0xcc>)
 8000b0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	4b1e      	ldr	r3, [pc, #120]	@ (8000b90 <SystemClock_Config+0xcc>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b20:	2301      	movs	r3, #1
 8000b22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b34:	2304      	movs	r3, #4
 8000b36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000b38:	2364      	movs	r3, #100	@ 0x64
 8000b3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b40:	2304      	movs	r3, #4
 8000b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 0320 	add.w	r3, r7, #32
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 f95f 	bl	8001e0c <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b54:	f000 f81e 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b58:	230f      	movs	r3, #15
 8000b5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	2103      	movs	r1, #3
 8000b74:	4618      	mov	r0, r3
 8000b76:	f001 fbc1 	bl	80022fc <HAL_RCC_ClockConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b80:	f000 f808 	bl	8000b94 <Error_Handler>
  }
}
 8000b84:	bf00      	nop
 8000b86:	3750      	adds	r7, #80	@ 0x50
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40007000 	.word	0x40007000

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <Error_Handler+0x8>

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <HAL_MspInit+0x5c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bae:	4a13      	ldr	r2, [pc, #76]	@ (8000bfc <HAL_MspInit+0x5c>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <HAL_MspInit+0x5c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <HAL_MspInit+0x5c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bca:	4a0c      	ldr	r2, [pc, #48]	@ (8000bfc <HAL_MspInit+0x5c>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <HAL_MspInit+0x5c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bde:	2007      	movs	r0, #7
 8000be0:	f000 fba0 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2100      	movs	r1, #0
 8000be8:	2005      	movs	r0, #5
 8000bea:	f000 fba6 	bl	800133a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000bee:	2005      	movs	r0, #5
 8000bf0:	f000 fbbf 	bl	8001372 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <NMI_Handler+0x4>

08000c08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <MemManage_Handler+0x4>

08000c18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c56:	f000 fa51 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c70:	4802      	ldr	r0, [pc, #8]	@ (8000c7c <DMA1_Stream5_IRQHandler+0x10>)
 8000c72:	f000 fcd9 	bl	8001628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000120 	.word	0x20000120

08000c80 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000c84:	4802      	ldr	r0, [pc, #8]	@ (8000c90 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000c86:	f001 fe2a 	bl	80028de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000090 	.word	0x20000090

08000c94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <USART2_IRQHandler+0x10>)
 8000c9a:	f002 f8bf 	bl	8002e1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200000d8 	.word	0x200000d8

08000ca8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	e00a      	b.n	8000cd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cba:	f3af 8000 	nop.w
 8000cbe:	4601      	mov	r1, r0
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	60ba      	str	r2, [r7, #8]
 8000cc6:	b2ca      	uxtb	r2, r1
 8000cc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	dbf0      	blt.n	8000cba <_read+0x12>
  }

  return len;
 8000cd8:	687b      	ldr	r3, [r7, #4]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	60f8      	str	r0, [r7, #12]
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	e009      	b.n	8000d08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	1c5a      	adds	r2, r3, #1
 8000cf8:	60ba      	str	r2, [r7, #8]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fe9b 	bl	8000a38 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697a      	ldr	r2, [r7, #20]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	dbf1      	blt.n	8000cf4 <_write+0x12>
  }
  return len;
 8000d10:	687b      	ldr	r3, [r7, #4]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <_close>:

int _close(int file)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d42:	605a      	str	r2, [r3, #4]
  return 0;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_isatty>:

int _isatty(int file)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d8c:	4a14      	ldr	r2, [pc, #80]	@ (8000de0 <_sbrk+0x5c>)
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <_sbrk+0x60>)
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d98:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da0:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <_sbrk+0x64>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	@ (8000dec <_sbrk+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da6:	4b10      	ldr	r3, [pc, #64]	@ (8000de8 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d207      	bcs.n	8000dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db4:	f003 f9b0 	bl	8004118 <__errno>
 8000db8:	4603      	mov	r3, r0
 8000dba:	220c      	movs	r2, #12
 8000dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	e009      	b.n	8000dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dca:	4b07      	ldr	r3, [pc, #28]	@ (8000de8 <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a05      	ldr	r2, [pc, #20]	@ (8000de8 <_sbrk+0x64>)
 8000dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20020000 	.word	0x20020000
 8000de4:	00000400 	.word	0x00000400
 8000de8:	2000008c 	.word	0x2000008c
 8000dec:	200002d0 	.word	0x200002d0

08000df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <SystemInit+0x20>)
 8000df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dfa:	4a05      	ldr	r2, [pc, #20]	@ (8000e10 <SystemInit+0x20>)
 8000dfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000e18:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <MX_TIM11_Init+0x40>)
 8000e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e58 <MX_TIM11_Init+0x44>)
 8000e1c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <MX_TIM11_Init+0x40>)
 8000e20:	2263      	movs	r2, #99	@ 0x63
 8000e22:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <MX_TIM11_Init+0x40>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <MX_TIM11_Init+0x40>)
 8000e2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e30:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e32:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <MX_TIM11_Init+0x40>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <MX_TIM11_Init+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <MX_TIM11_Init+0x40>)
 8000e40:	f001 fc7c 	bl	800273c <HAL_TIM_Base_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000e4a:	f7ff fea3 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000090 	.word	0x20000090
 8000e58:	40014800 	.word	0x40014800

08000e5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x48>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d115      	bne.n	8000e9a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <HAL_TIM_Base_MspInit+0x4c>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e76:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea8 <HAL_TIM_Base_MspInit+0x4c>)
 8000e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <HAL_TIM_Base_MspInit+0x4c>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	201a      	movs	r0, #26
 8000e90:	f000 fa53 	bl	800133a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000e94:	201a      	movs	r0, #26
 8000e96:	f000 fa6c 	bl	8001372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40014800 	.word	0x40014800
 8000ea8:	40023800 	.word	0x40023800

08000eac <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <MX_USART2_UART_Init+0x4c>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	@ (8000efc <MX_USART2_UART_Init+0x50>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <MX_USART2_UART_Init+0x4c>)
 8000eb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ebc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <MX_USART2_UART_Init+0x4c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <MX_USART2_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <MX_USART2_UART_Init+0x4c>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <MX_USART2_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <MX_USART2_UART_Init+0x4c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_USART2_UART_Init+0x4c>)
 8000ee4:	f001 febe 	bl	8002c64 <HAL_UART_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eee:	f7ff fe51 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200000d8 	.word	0x200000d8
 8000efc:	40004400 	.word	0x40004400

08000f00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	@ 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a34      	ldr	r2, [pc, #208]	@ (8000ff0 <HAL_UART_MspInit+0xf0>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d161      	bne.n	8000fe6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b33      	ldr	r3, [pc, #204]	@ (8000ff4 <HAL_UART_MspInit+0xf4>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	4a32      	ldr	r2, [pc, #200]	@ (8000ff4 <HAL_UART_MspInit+0xf4>)
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f32:	4b30      	ldr	r3, [pc, #192]	@ (8000ff4 <HAL_UART_MspInit+0xf4>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff4 <HAL_UART_MspInit+0xf4>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a2b      	ldr	r2, [pc, #172]	@ (8000ff4 <HAL_UART_MspInit+0xf4>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b29      	ldr	r3, [pc, #164]	@ (8000ff4 <HAL_UART_MspInit+0xf4>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4820      	ldr	r0, [pc, #128]	@ (8000ff8 <HAL_UART_MspInit+0xf8>)
 8000f76:	f000 fd93 	bl	8001aa0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000f7a:	4b20      	ldr	r3, [pc, #128]	@ (8000ffc <HAL_UART_MspInit+0xfc>)
 8000f7c:	4a20      	ldr	r2, [pc, #128]	@ (8001000 <HAL_UART_MspInit+0x100>)
 8000f7e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000f80:	4b1e      	ldr	r3, [pc, #120]	@ (8000ffc <HAL_UART_MspInit+0xfc>)
 8000f82:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f86:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f88:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <HAL_UART_MspInit+0xfc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ffc <HAL_UART_MspInit+0xfc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <HAL_UART_MspInit+0xfc>)
 8000f96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f9a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f9c:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <HAL_UART_MspInit+0xfc>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <HAL_UART_MspInit+0xfc>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <HAL_UART_MspInit+0xfc>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fae:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <HAL_UART_MspInit+0xfc>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <HAL_UART_MspInit+0xfc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000fba:	4810      	ldr	r0, [pc, #64]	@ (8000ffc <HAL_UART_MspInit+0xfc>)
 8000fbc:	f000 f9f4 	bl	80013a8 <HAL_DMA_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000fc6:	f7ff fde5 	bl	8000b94 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8000ffc <HAL_UART_MspInit+0xfc>)
 8000fce:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <HAL_UART_MspInit+0xfc>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2026      	movs	r0, #38	@ 0x26
 8000fdc:	f000 f9ad 	bl	800133a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fe0:	2026      	movs	r0, #38	@ 0x26
 8000fe2:	f000 f9c6 	bl	8001372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	@ 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40004400 	.word	0x40004400
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020000 	.word	0x40020000
 8000ffc:	20000120 	.word	0x20000120
 8001000:	40026088 	.word	0x40026088

08001004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001004:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800103c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001008:	f7ff fef2 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800100c:	480c      	ldr	r0, [pc, #48]	@ (8001040 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800100e:	490d      	ldr	r1, [pc, #52]	@ (8001044 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001010:	4a0d      	ldr	r2, [pc, #52]	@ (8001048 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0a      	ldr	r2, [pc, #40]	@ (800104c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001024:	4c0a      	ldr	r4, [pc, #40]	@ (8001050 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001032:	f003 f877 	bl	8004124 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001036:	f7ff fd11 	bl	8000a5c <main>
  bx  lr    
 800103a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800103c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001044:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001048:	08004c88 	.word	0x08004c88
  ldr r2, =_sbss
 800104c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001050:	200002d0 	.word	0x200002d0

08001054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC_IRQHandler>
	...

08001058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800105c:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0d      	ldr	r2, [pc, #52]	@ (8001098 <HAL_Init+0x40>)
 8001062:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001066:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001068:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <HAL_Init+0x40>)
 800106e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001072:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a07      	ldr	r2, [pc, #28]	@ (8001098 <HAL_Init+0x40>)
 800107a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800107e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 f94f 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001086:	2000      	movs	r0, #0
 8001088:	f000 f808 	bl	800109c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800108c:	f7ff fd88 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023c00 	.word	0x40023c00

0800109c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a4:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <HAL_InitTick+0x54>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <HAL_InitTick+0x58>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f967 	bl	800138e <HAL_SYSTICK_Config>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00e      	b.n	80010e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d80a      	bhi.n	80010e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d0:	2200      	movs	r2, #0
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f000 f92f 	bl	800133a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010dc:	4a06      	ldr	r2, [pc, #24]	@ (80010f8 <HAL_InitTick+0x5c>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000008 	.word	0x20000008
 80010f8:	20000004 	.word	0x20000004

080010fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008
 8001120:	20000180 	.word	0x20000180

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	@ (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000180 	.word	0x20000180

0800113c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff ffee 	bl	8001124 <HAL_GetTick>
 8001148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d005      	beq.n	8001162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <HAL_Delay+0x44>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001162:	bf00      	nop
 8001164:	f7ff ffde 	bl	8001124 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	429a      	cmp	r2, r3
 8001172:	d8f7      	bhi.n	8001164 <HAL_Delay+0x28>
  {
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0b      	blt.n	8001212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4907      	ldr	r1, [pc, #28]	@ (8001220 <__NVIC_EnableIRQ+0x38>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2001      	movs	r0, #1
 800120a:	fa00 f202 	lsl.w	r2, r0, r2
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	@ (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	@ (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	@ 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	@ 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	210f      	movs	r1, #15
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f7ff ff8e 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff29 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff3e 	bl	80011cc <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff8e 	bl	8001278 <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5d 	bl	8001224 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff31 	bl	80011e8 <__NVIC_EnableIRQ>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffa2 	bl	80012e0 <SysTick_Config>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff feb6 	bl	8001124 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e099      	b.n	80014f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2202      	movs	r2, #2
 80013c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0201 	bic.w	r2, r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e4:	e00f      	b.n	8001406 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013e6:	f7ff fe9d 	bl	8001124 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b05      	cmp	r3, #5
 80013f2:	d908      	bls.n	8001406 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2220      	movs	r2, #32
 80013f8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2203      	movs	r2, #3
 80013fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e078      	b.n	80014f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1e8      	bne.n	80013e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	4b38      	ldr	r3, [pc, #224]	@ (8001500 <HAL_DMA_Init+0x158>)
 8001420:	4013      	ands	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001432:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800143e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	4313      	orrs	r3, r2
 8001456:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145c:	2b04      	cmp	r3, #4
 800145e:	d107      	bne.n	8001470 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001468:	4313      	orrs	r3, r2
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	4313      	orrs	r3, r2
 800146e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f023 0307 	bic.w	r3, r3, #7
 8001486:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	4313      	orrs	r3, r2
 8001490:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001496:	2b04      	cmp	r3, #4
 8001498:	d117      	bne.n	80014ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00e      	beq.n	80014ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 fa7b 	bl	80019a8 <DMA_CheckFifoParam>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d008      	beq.n	80014ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2240      	movs	r2, #64	@ 0x40
 80014bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80014c6:	2301      	movs	r3, #1
 80014c8:	e016      	b.n	80014f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 fa32 	bl	800193c <DMA_CalcBaseAndBitshift>
 80014d8:	4603      	mov	r3, r0
 80014da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e0:	223f      	movs	r2, #63	@ 0x3f
 80014e2:	409a      	lsls	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	f010803f 	.word	0xf010803f

08001504 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001510:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001512:	f7ff fe07 	bl	8001124 <HAL_GetTick>
 8001516:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d008      	beq.n	8001536 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2280      	movs	r2, #128	@ 0x80
 8001528:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e052      	b.n	80015dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0216 	bic.w	r2, r2, #22
 8001544:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	695a      	ldr	r2, [r3, #20]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001554:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	2b00      	cmp	r3, #0
 800155c:	d103      	bne.n	8001566 <HAL_DMA_Abort+0x62>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0208 	bic.w	r2, r2, #8
 8001574:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0201 	bic.w	r2, r2, #1
 8001584:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001586:	e013      	b.n	80015b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001588:	f7ff fdcc 	bl	8001124 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b05      	cmp	r3, #5
 8001594:	d90c      	bls.n	80015b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2220      	movs	r2, #32
 800159a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2203      	movs	r2, #3
 80015a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e015      	b.n	80015dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1e4      	bne.n	8001588 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c2:	223f      	movs	r2, #63	@ 0x3f
 80015c4:	409a      	lsls	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d004      	beq.n	8001602 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2280      	movs	r2, #128	@ 0x80
 80015fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e00c      	b.n	800161c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2205      	movs	r2, #5
 8001606:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0201 	bic.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001634:	4b8e      	ldr	r3, [pc, #568]	@ (8001870 <HAL_DMA_IRQHandler+0x248>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a8e      	ldr	r2, [pc, #568]	@ (8001874 <HAL_DMA_IRQHandler+0x24c>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	0a9b      	lsrs	r3, r3, #10
 8001640:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001646:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001652:	2208      	movs	r2, #8
 8001654:	409a      	lsls	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d01a      	beq.n	8001694 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d013      	beq.n	8001694 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0204 	bic.w	r2, r2, #4
 800167a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001680:	2208      	movs	r2, #8
 8001682:	409a      	lsls	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800168c:	f043 0201 	orr.w	r2, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001698:	2201      	movs	r2, #1
 800169a:	409a      	lsls	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4013      	ands	r3, r2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d012      	beq.n	80016ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00b      	beq.n	80016ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b6:	2201      	movs	r2, #1
 80016b8:	409a      	lsls	r2, r3
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c2:	f043 0202 	orr.w	r2, r3, #2
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ce:	2204      	movs	r2, #4
 80016d0:	409a      	lsls	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d012      	beq.n	8001700 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00b      	beq.n	8001700 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ec:	2204      	movs	r2, #4
 80016ee:	409a      	lsls	r2, r3
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016f8:	f043 0204 	orr.w	r2, r3, #4
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001704:	2210      	movs	r2, #16
 8001706:	409a      	lsls	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4013      	ands	r3, r2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d043      	beq.n	8001798 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d03c      	beq.n	8001798 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001722:	2210      	movs	r2, #16
 8001724:	409a      	lsls	r2, r3
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d018      	beq.n	800176a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d108      	bne.n	8001758 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	2b00      	cmp	r3, #0
 800174c:	d024      	beq.n	8001798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	4798      	blx	r3
 8001756:	e01f      	b.n	8001798 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800175c:	2b00      	cmp	r3, #0
 800175e:	d01b      	beq.n	8001798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	4798      	blx	r3
 8001768:	e016      	b.n	8001798 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d107      	bne.n	8001788 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0208 	bic.w	r2, r2, #8
 8001786:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179c:	2220      	movs	r2, #32
 800179e:	409a      	lsls	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 808f 	beq.w	80018c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 8087 	beq.w	80018c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017be:	2220      	movs	r2, #32
 80017c0:	409a      	lsls	r2, r3
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b05      	cmp	r3, #5
 80017d0:	d136      	bne.n	8001840 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0216 	bic.w	r2, r2, #22
 80017e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d103      	bne.n	8001802 <HAL_DMA_IRQHandler+0x1da>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d007      	beq.n	8001812 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0208 	bic.w	r2, r2, #8
 8001810:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001816:	223f      	movs	r2, #63	@ 0x3f
 8001818:	409a      	lsls	r2, r3
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001832:	2b00      	cmp	r3, #0
 8001834:	d07e      	beq.n	8001934 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	4798      	blx	r3
        }
        return;
 800183e:	e079      	b.n	8001934 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d01d      	beq.n	800188a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10d      	bne.n	8001878 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001860:	2b00      	cmp	r3, #0
 8001862:	d031      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	4798      	blx	r3
 800186c:	e02c      	b.n	80018c8 <HAL_DMA_IRQHandler+0x2a0>
 800186e:	bf00      	nop
 8001870:	20000000 	.word	0x20000000
 8001874:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800187c:	2b00      	cmp	r3, #0
 800187e:	d023      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	4798      	blx	r3
 8001888:	e01e      	b.n	80018c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10f      	bne.n	80018b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0210 	bic.w	r2, r2, #16
 80018a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d032      	beq.n	8001936 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d022      	beq.n	8001922 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2205      	movs	r2, #5
 80018e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0201 	bic.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	3301      	adds	r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d307      	bcc.n	8001910 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f2      	bne.n	80018f4 <HAL_DMA_IRQHandler+0x2cc>
 800190e:	e000      	b.n	8001912 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001910:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	4798      	blx	r3
 8001932:	e000      	b.n	8001936 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001934:	bf00      	nop
    }
  }
}
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	3b10      	subs	r3, #16
 800194c:	4a14      	ldr	r2, [pc, #80]	@ (80019a0 <DMA_CalcBaseAndBitshift+0x64>)
 800194e:	fba2 2303 	umull	r2, r3, r2, r3
 8001952:	091b      	lsrs	r3, r3, #4
 8001954:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001956:	4a13      	ldr	r2, [pc, #76]	@ (80019a4 <DMA_CalcBaseAndBitshift+0x68>)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4413      	add	r3, r2
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b03      	cmp	r3, #3
 8001968:	d909      	bls.n	800197e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001972:	f023 0303 	bic.w	r3, r3, #3
 8001976:	1d1a      	adds	r2, r3, #4
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	659a      	str	r2, [r3, #88]	@ 0x58
 800197c:	e007      	b.n	800198e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001986:	f023 0303 	bic.w	r3, r3, #3
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	aaaaaaab 	.word	0xaaaaaaab
 80019a4:	08004c3c 	.word	0x08004c3c

080019a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d11f      	bne.n	8001a02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d856      	bhi.n	8001a76 <DMA_CheckFifoParam+0xce>
 80019c8:	a201      	add	r2, pc, #4	@ (adr r2, 80019d0 <DMA_CheckFifoParam+0x28>)
 80019ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ce:	bf00      	nop
 80019d0:	080019e1 	.word	0x080019e1
 80019d4:	080019f3 	.word	0x080019f3
 80019d8:	080019e1 	.word	0x080019e1
 80019dc:	08001a77 	.word	0x08001a77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d046      	beq.n	8001a7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019f0:	e043      	b.n	8001a7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019fa:	d140      	bne.n	8001a7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a00:	e03d      	b.n	8001a7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a0a:	d121      	bne.n	8001a50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d837      	bhi.n	8001a82 <DMA_CheckFifoParam+0xda>
 8001a12:	a201      	add	r2, pc, #4	@ (adr r2, 8001a18 <DMA_CheckFifoParam+0x70>)
 8001a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a18:	08001a29 	.word	0x08001a29
 8001a1c:	08001a2f 	.word	0x08001a2f
 8001a20:	08001a29 	.word	0x08001a29
 8001a24:	08001a41 	.word	0x08001a41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a2c:	e030      	b.n	8001a90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d025      	beq.n	8001a86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a3e:	e022      	b.n	8001a86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a44:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a48:	d11f      	bne.n	8001a8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a4e:	e01c      	b.n	8001a8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d903      	bls.n	8001a5e <DMA_CheckFifoParam+0xb6>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d003      	beq.n	8001a64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a5c:	e018      	b.n	8001a90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	73fb      	strb	r3, [r7, #15]
      break;
 8001a62:	e015      	b.n	8001a90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00e      	beq.n	8001a8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
      break;
 8001a74:	e00b      	b.n	8001a8e <DMA_CheckFifoParam+0xe6>
      break;
 8001a76:	bf00      	nop
 8001a78:	e00a      	b.n	8001a90 <DMA_CheckFifoParam+0xe8>
      break;
 8001a7a:	bf00      	nop
 8001a7c:	e008      	b.n	8001a90 <DMA_CheckFifoParam+0xe8>
      break;
 8001a7e:	bf00      	nop
 8001a80:	e006      	b.n	8001a90 <DMA_CheckFifoParam+0xe8>
      break;
 8001a82:	bf00      	nop
 8001a84:	e004      	b.n	8001a90 <DMA_CheckFifoParam+0xe8>
      break;
 8001a86:	bf00      	nop
 8001a88:	e002      	b.n	8001a90 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a8a:	bf00      	nop
 8001a8c:	e000      	b.n	8001a90 <DMA_CheckFifoParam+0xe8>
      break;
 8001a8e:	bf00      	nop
    }
  } 
  
  return status; 
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop

08001aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	@ 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	e159      	b.n	8001d70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001abc:	2201      	movs	r2, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	f040 8148 	bne.w	8001d6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d005      	beq.n	8001af2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d130      	bne.n	8001b54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b28:	2201      	movs	r2, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	f003 0201 	and.w	r2, r3, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d017      	beq.n	8001b90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d123      	bne.n	8001be4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	08da      	lsrs	r2, r3, #3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3208      	adds	r2, #8
 8001ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	220f      	movs	r2, #15
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	08da      	lsrs	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3208      	adds	r2, #8
 8001bde:	69b9      	ldr	r1, [r7, #24]
 8001be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0203 	and.w	r2, r3, #3
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 80a2 	beq.w	8001d6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b57      	ldr	r3, [pc, #348]	@ (8001d88 <HAL_GPIO_Init+0x2e8>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	4a56      	ldr	r2, [pc, #344]	@ (8001d88 <HAL_GPIO_Init+0x2e8>)
 8001c30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c36:	4b54      	ldr	r3, [pc, #336]	@ (8001d88 <HAL_GPIO_Init+0x2e8>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c42:	4a52      	ldr	r2, [pc, #328]	@ (8001d8c <HAL_GPIO_Init+0x2ec>)
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	089b      	lsrs	r3, r3, #2
 8001c48:	3302      	adds	r3, #2
 8001c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	220f      	movs	r2, #15
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a49      	ldr	r2, [pc, #292]	@ (8001d90 <HAL_GPIO_Init+0x2f0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d019      	beq.n	8001ca2 <HAL_GPIO_Init+0x202>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a48      	ldr	r2, [pc, #288]	@ (8001d94 <HAL_GPIO_Init+0x2f4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d013      	beq.n	8001c9e <HAL_GPIO_Init+0x1fe>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a47      	ldr	r2, [pc, #284]	@ (8001d98 <HAL_GPIO_Init+0x2f8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00d      	beq.n	8001c9a <HAL_GPIO_Init+0x1fa>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a46      	ldr	r2, [pc, #280]	@ (8001d9c <HAL_GPIO_Init+0x2fc>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d007      	beq.n	8001c96 <HAL_GPIO_Init+0x1f6>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a45      	ldr	r2, [pc, #276]	@ (8001da0 <HAL_GPIO_Init+0x300>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d101      	bne.n	8001c92 <HAL_GPIO_Init+0x1f2>
 8001c8e:	2304      	movs	r3, #4
 8001c90:	e008      	b.n	8001ca4 <HAL_GPIO_Init+0x204>
 8001c92:	2307      	movs	r3, #7
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x204>
 8001c96:	2303      	movs	r3, #3
 8001c98:	e004      	b.n	8001ca4 <HAL_GPIO_Init+0x204>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e002      	b.n	8001ca4 <HAL_GPIO_Init+0x204>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_GPIO_Init+0x204>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	f002 0203 	and.w	r2, r2, #3
 8001caa:	0092      	lsls	r2, r2, #2
 8001cac:	4093      	lsls	r3, r2
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb4:	4935      	ldr	r1, [pc, #212]	@ (8001d8c <HAL_GPIO_Init+0x2ec>)
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc2:	4b38      	ldr	r3, [pc, #224]	@ (8001da4 <HAL_GPIO_Init+0x304>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ce6:	4a2f      	ldr	r2, [pc, #188]	@ (8001da4 <HAL_GPIO_Init+0x304>)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cec:	4b2d      	ldr	r3, [pc, #180]	@ (8001da4 <HAL_GPIO_Init+0x304>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d10:	4a24      	ldr	r2, [pc, #144]	@ (8001da4 <HAL_GPIO_Init+0x304>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d16:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <HAL_GPIO_Init+0x304>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8001da4 <HAL_GPIO_Init+0x304>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d40:	4b18      	ldr	r3, [pc, #96]	@ (8001da4 <HAL_GPIO_Init+0x304>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d64:	4a0f      	ldr	r2, [pc, #60]	@ (8001da4 <HAL_GPIO_Init+0x304>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b0f      	cmp	r3, #15
 8001d74:	f67f aea2 	bls.w	8001abc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3724      	adds	r7, #36	@ 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40013800 	.word	0x40013800
 8001d90:	40020000 	.word	0x40020000
 8001d94:	40020400 	.word	0x40020400
 8001d98:	40020800 	.word	0x40020800
 8001d9c:	40020c00 	.word	0x40020c00
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40013c00 	.word	0x40013c00

08001da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	e001      	b.n	8001dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
 8001de4:	4613      	mov	r3, r2
 8001de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de8:	787b      	ldrb	r3, [r7, #1]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df4:	e003      	b.n	8001dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001df6:	887b      	ldrh	r3, [r7, #2]
 8001df8:	041a      	lsls	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	619a      	str	r2, [r3, #24]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e267      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d075      	beq.n	8001f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e2a:	4b88      	ldr	r3, [pc, #544]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d00c      	beq.n	8001e50 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e36:	4b85      	ldr	r3, [pc, #532]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d112      	bne.n	8001e68 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e42:	4b82      	ldr	r3, [pc, #520]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e4e:	d10b      	bne.n	8001e68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e50:	4b7e      	ldr	r3, [pc, #504]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d05b      	beq.n	8001f14 <HAL_RCC_OscConfig+0x108>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d157      	bne.n	8001f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e242      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e70:	d106      	bne.n	8001e80 <HAL_RCC_OscConfig+0x74>
 8001e72:	4b76      	ldr	r3, [pc, #472]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a75      	ldr	r2, [pc, #468]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e01d      	b.n	8001ebc <HAL_RCC_OscConfig+0xb0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x98>
 8001e8a:	4b70      	ldr	r3, [pc, #448]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a6f      	ldr	r2, [pc, #444]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b6d      	ldr	r3, [pc, #436]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a6c      	ldr	r2, [pc, #432]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e00b      	b.n	8001ebc <HAL_RCC_OscConfig+0xb0>
 8001ea4:	4b69      	ldr	r3, [pc, #420]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a68      	ldr	r2, [pc, #416]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b66      	ldr	r3, [pc, #408]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a65      	ldr	r2, [pc, #404]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d013      	beq.n	8001eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff f92e 	bl	8001124 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7ff f92a 	bl	8001124 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	@ 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e207      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	4b5b      	ldr	r3, [pc, #364]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0xc0>
 8001eea:	e014      	b.n	8001f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7ff f91a 	bl	8001124 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7ff f916 	bl	8001124 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	@ 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e1f3      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f06:	4b51      	ldr	r3, [pc, #324]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0xe8>
 8001f12:	e000      	b.n	8001f16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d063      	beq.n	8001fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f22:	4b4a      	ldr	r3, [pc, #296]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00b      	beq.n	8001f46 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f2e:	4b47      	ldr	r3, [pc, #284]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d11c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3a:	4b44      	ldr	r3, [pc, #272]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d116      	bne.n	8001f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f46:	4b41      	ldr	r3, [pc, #260]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <HAL_RCC_OscConfig+0x152>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d001      	beq.n	8001f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e1c7      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4937      	ldr	r1, [pc, #220]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f72:	e03a      	b.n	8001fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d020      	beq.n	8001fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f7c:	4b34      	ldr	r3, [pc, #208]	@ (8002050 <HAL_RCC_OscConfig+0x244>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7ff f8cf 	bl	8001124 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8a:	f7ff f8cb 	bl	8001124 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e1a8      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa8:	4b28      	ldr	r3, [pc, #160]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4925      	ldr	r1, [pc, #148]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]
 8001fbc:	e015      	b.n	8001fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fbe:	4b24      	ldr	r3, [pc, #144]	@ (8002050 <HAL_RCC_OscConfig+0x244>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7ff f8ae 	bl	8001124 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fcc:	f7ff f8aa 	bl	8001124 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e187      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d036      	beq.n	8002064 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d016      	beq.n	800202c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffe:	4b15      	ldr	r3, [pc, #84]	@ (8002054 <HAL_RCC_OscConfig+0x248>)
 8002000:	2201      	movs	r2, #1
 8002002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7ff f88e 	bl	8001124 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200c:	f7ff f88a 	bl	8001124 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e167      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <HAL_RCC_OscConfig+0x240>)
 8002020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0x200>
 800202a:	e01b      	b.n	8002064 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202c:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <HAL_RCC_OscConfig+0x248>)
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002032:	f7ff f877 	bl	8001124 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	e00e      	b.n	8002058 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203a:	f7ff f873 	bl	8001124 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d907      	bls.n	8002058 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e150      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
 800204c:	40023800 	.word	0x40023800
 8002050:	42470000 	.word	0x42470000
 8002054:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002058:	4b88      	ldr	r3, [pc, #544]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800205a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1ea      	bne.n	800203a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 8097 	beq.w	80021a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002076:	4b81      	ldr	r3, [pc, #516]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10f      	bne.n	80020a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	4b7d      	ldr	r3, [pc, #500]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	4a7c      	ldr	r2, [pc, #496]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002090:	6413      	str	r3, [r2, #64]	@ 0x40
 8002092:	4b7a      	ldr	r3, [pc, #488]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209e:	2301      	movs	r3, #1
 80020a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a2:	4b77      	ldr	r3, [pc, #476]	@ (8002280 <HAL_RCC_OscConfig+0x474>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d118      	bne.n	80020e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ae:	4b74      	ldr	r3, [pc, #464]	@ (8002280 <HAL_RCC_OscConfig+0x474>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a73      	ldr	r2, [pc, #460]	@ (8002280 <HAL_RCC_OscConfig+0x474>)
 80020b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ba:	f7ff f833 	bl	8001124 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c2:	f7ff f82f 	bl	8001124 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e10c      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002280 <HAL_RCC_OscConfig+0x474>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d106      	bne.n	80020f6 <HAL_RCC_OscConfig+0x2ea>
 80020e8:	4b64      	ldr	r3, [pc, #400]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 80020ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ec:	4a63      	ldr	r2, [pc, #396]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020f4:	e01c      	b.n	8002130 <HAL_RCC_OscConfig+0x324>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b05      	cmp	r3, #5
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0x30c>
 80020fe:	4b5f      	ldr	r3, [pc, #380]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002102:	4a5e      	ldr	r2, [pc, #376]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002104:	f043 0304 	orr.w	r3, r3, #4
 8002108:	6713      	str	r3, [r2, #112]	@ 0x70
 800210a:	4b5c      	ldr	r3, [pc, #368]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210e:	4a5b      	ldr	r2, [pc, #364]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6713      	str	r3, [r2, #112]	@ 0x70
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0x324>
 8002118:	4b58      	ldr	r3, [pc, #352]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211c:	4a57      	ldr	r2, [pc, #348]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800211e:	f023 0301 	bic.w	r3, r3, #1
 8002122:	6713      	str	r3, [r2, #112]	@ 0x70
 8002124:	4b55      	ldr	r3, [pc, #340]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002128:	4a54      	ldr	r2, [pc, #336]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800212a:	f023 0304 	bic.w	r3, r3, #4
 800212e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d015      	beq.n	8002164 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002138:	f7fe fff4 	bl	8001124 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213e:	e00a      	b.n	8002156 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002140:	f7fe fff0 	bl	8001124 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e0cb      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002156:	4b49      	ldr	r3, [pc, #292]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0ee      	beq.n	8002140 <HAL_RCC_OscConfig+0x334>
 8002162:	e014      	b.n	800218e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002164:	f7fe ffde 	bl	8001124 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216a:	e00a      	b.n	8002182 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216c:	f7fe ffda 	bl	8001124 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0b5      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002182:	4b3e      	ldr	r3, [pc, #248]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1ee      	bne.n	800216c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800218e:	7dfb      	ldrb	r3, [r7, #23]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d105      	bne.n	80021a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002194:	4b39      	ldr	r3, [pc, #228]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002198:	4a38      	ldr	r2, [pc, #224]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 800219a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800219e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80a1 	beq.w	80022ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021aa:	4b34      	ldr	r3, [pc, #208]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d05c      	beq.n	8002270 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d141      	bne.n	8002242 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021be:	4b31      	ldr	r3, [pc, #196]	@ (8002284 <HAL_RCC_OscConfig+0x478>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7fe ffae 	bl	8001124 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021cc:	f7fe ffaa 	bl	8001124 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e087      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021de:	4b27      	ldr	r3, [pc, #156]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69da      	ldr	r2, [r3, #28]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f8:	019b      	lsls	r3, r3, #6
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002200:	085b      	lsrs	r3, r3, #1
 8002202:	3b01      	subs	r3, #1
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220c:	061b      	lsls	r3, r3, #24
 800220e:	491b      	ldr	r1, [pc, #108]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002214:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <HAL_RCC_OscConfig+0x478>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7fe ff83 	bl	8001124 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002222:	f7fe ff7f 	bl	8001124 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e05c      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002234:	4b11      	ldr	r3, [pc, #68]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x416>
 8002240:	e054      	b.n	80022ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002242:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <HAL_RCC_OscConfig+0x478>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7fe ff6c 	bl	8001124 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002250:	f7fe ff68 	bl	8001124 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e045      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002262:	4b06      	ldr	r3, [pc, #24]	@ (800227c <HAL_RCC_OscConfig+0x470>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x444>
 800226e:	e03d      	b.n	80022ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d107      	bne.n	8002288 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e038      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
 800227c:	40023800 	.word	0x40023800
 8002280:	40007000 	.word	0x40007000
 8002284:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002288:	4b1b      	ldr	r3, [pc, #108]	@ (80022f8 <HAL_RCC_OscConfig+0x4ec>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d028      	beq.n	80022e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d121      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d11a      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022b8:	4013      	ands	r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d111      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ce:	085b      	lsrs	r3, r3, #1
 80022d0:	3b01      	subs	r3, #1
 80022d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d107      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800

080022fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0cc      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002310:	4b68      	ldr	r3, [pc, #416]	@ (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d90c      	bls.n	8002338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b65      	ldr	r3, [pc, #404]	@ (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b63      	ldr	r3, [pc, #396]	@ (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0b8      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d020      	beq.n	8002386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002350:	4b59      	ldr	r3, [pc, #356]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4a58      	ldr	r2, [pc, #352]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800235a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002368:	4b53      	ldr	r3, [pc, #332]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4a52      	ldr	r2, [pc, #328]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002374:	4b50      	ldr	r3, [pc, #320]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	494d      	ldr	r1, [pc, #308]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	4313      	orrs	r3, r2
 8002384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d044      	beq.n	800241c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d107      	bne.n	80023aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239a:	4b47      	ldr	r3, [pc, #284]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d119      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e07f      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d003      	beq.n	80023ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ba:	4b3f      	ldr	r3, [pc, #252]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e06f      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ca:	4b3b      	ldr	r3, [pc, #236]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e067      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023da:	4b37      	ldr	r3, [pc, #220]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f023 0203 	bic.w	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4934      	ldr	r1, [pc, #208]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ec:	f7fe fe9a 	bl	8001124 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f2:	e00a      	b.n	800240a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7fe fe96 	bl	8001124 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e04f      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	4b2b      	ldr	r3, [pc, #172]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 020c 	and.w	r2, r3, #12
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	429a      	cmp	r2, r3
 800241a:	d1eb      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800241c:	4b25      	ldr	r3, [pc, #148]	@ (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d20c      	bcs.n	8002444 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b22      	ldr	r3, [pc, #136]	@ (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b20      	ldr	r3, [pc, #128]	@ (80024b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e032      	b.n	80024aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002450:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4916      	ldr	r1, [pc, #88]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800246e:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	490e      	ldr	r1, [pc, #56]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002482:	f000 f821 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8002486:	4602      	mov	r2, r0
 8002488:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	490a      	ldr	r1, [pc, #40]	@ (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	5ccb      	ldrb	r3, [r1, r3]
 8002496:	fa22 f303 	lsr.w	r3, r2, r3
 800249a:	4a09      	ldr	r2, [pc, #36]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800249e:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe fdfa 	bl	800109c <HAL_InitTick>

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40023c00 	.word	0x40023c00
 80024b8:	40023800 	.word	0x40023800
 80024bc:	08004c24 	.word	0x08004c24
 80024c0:	20000000 	.word	0x20000000
 80024c4:	20000004 	.word	0x20000004

080024c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024cc:	b094      	sub	sp, #80	@ 0x50
 80024ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e0:	4b79      	ldr	r3, [pc, #484]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d00d      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0x40>
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	f200 80e1 	bhi.w	80026b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x34>
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d003      	beq.n	8002502 <HAL_RCC_GetSysClockFreq+0x3a>
 80024fa:	e0db      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024fc:	4b73      	ldr	r3, [pc, #460]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x204>)
 80024fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002500:	e0db      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002502:	4b73      	ldr	r3, [pc, #460]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002504:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002506:	e0d8      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002508:	4b6f      	ldr	r3, [pc, #444]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002510:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002512:	4b6d      	ldr	r3, [pc, #436]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d063      	beq.n	80025e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251e:	4b6a      	ldr	r3, [pc, #424]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	099b      	lsrs	r3, r3, #6
 8002524:	2200      	movs	r2, #0
 8002526:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002528:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800252a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002530:	633b      	str	r3, [r7, #48]	@ 0x30
 8002532:	2300      	movs	r3, #0
 8002534:	637b      	str	r3, [r7, #52]	@ 0x34
 8002536:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800253a:	4622      	mov	r2, r4
 800253c:	462b      	mov	r3, r5
 800253e:	f04f 0000 	mov.w	r0, #0
 8002542:	f04f 0100 	mov.w	r1, #0
 8002546:	0159      	lsls	r1, r3, #5
 8002548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800254c:	0150      	lsls	r0, r2, #5
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4621      	mov	r1, r4
 8002554:	1a51      	subs	r1, r2, r1
 8002556:	6139      	str	r1, [r7, #16]
 8002558:	4629      	mov	r1, r5
 800255a:	eb63 0301 	sbc.w	r3, r3, r1
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800256c:	4659      	mov	r1, fp
 800256e:	018b      	lsls	r3, r1, #6
 8002570:	4651      	mov	r1, sl
 8002572:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002576:	4651      	mov	r1, sl
 8002578:	018a      	lsls	r2, r1, #6
 800257a:	4651      	mov	r1, sl
 800257c:	ebb2 0801 	subs.w	r8, r2, r1
 8002580:	4659      	mov	r1, fp
 8002582:	eb63 0901 	sbc.w	r9, r3, r1
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800259a:	4690      	mov	r8, r2
 800259c:	4699      	mov	r9, r3
 800259e:	4623      	mov	r3, r4
 80025a0:	eb18 0303 	adds.w	r3, r8, r3
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	462b      	mov	r3, r5
 80025a8:	eb49 0303 	adc.w	r3, r9, r3
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025ba:	4629      	mov	r1, r5
 80025bc:	024b      	lsls	r3, r1, #9
 80025be:	4621      	mov	r1, r4
 80025c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025c4:	4621      	mov	r1, r4
 80025c6:	024a      	lsls	r2, r1, #9
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025ce:	2200      	movs	r2, #0
 80025d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025d8:	f7fd fe52 	bl	8000280 <__aeabi_uldivmod>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4613      	mov	r3, r2
 80025e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025e4:	e058      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e6:	4b38      	ldr	r3, [pc, #224]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	099b      	lsrs	r3, r3, #6
 80025ec:	2200      	movs	r2, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	4611      	mov	r1, r2
 80025f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025f6:	623b      	str	r3, [r7, #32]
 80025f8:	2300      	movs	r3, #0
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80025fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002600:	4642      	mov	r2, r8
 8002602:	464b      	mov	r3, r9
 8002604:	f04f 0000 	mov.w	r0, #0
 8002608:	f04f 0100 	mov.w	r1, #0
 800260c:	0159      	lsls	r1, r3, #5
 800260e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002612:	0150      	lsls	r0, r2, #5
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4641      	mov	r1, r8
 800261a:	ebb2 0a01 	subs.w	sl, r2, r1
 800261e:	4649      	mov	r1, r9
 8002620:	eb63 0b01 	sbc.w	fp, r3, r1
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002630:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002634:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002638:	ebb2 040a 	subs.w	r4, r2, sl
 800263c:	eb63 050b 	sbc.w	r5, r3, fp
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	00eb      	lsls	r3, r5, #3
 800264a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800264e:	00e2      	lsls	r2, r4, #3
 8002650:	4614      	mov	r4, r2
 8002652:	461d      	mov	r5, r3
 8002654:	4643      	mov	r3, r8
 8002656:	18e3      	adds	r3, r4, r3
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	464b      	mov	r3, r9
 800265c:	eb45 0303 	adc.w	r3, r5, r3
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800266e:	4629      	mov	r1, r5
 8002670:	028b      	lsls	r3, r1, #10
 8002672:	4621      	mov	r1, r4
 8002674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002678:	4621      	mov	r1, r4
 800267a:	028a      	lsls	r2, r1, #10
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002682:	2200      	movs	r2, #0
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	61fa      	str	r2, [r7, #28]
 8002688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800268c:	f7fd fdf8 	bl	8000280 <__aeabi_uldivmod>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4613      	mov	r3, r2
 8002696:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002698:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	0c1b      	lsrs	r3, r3, #16
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	3301      	adds	r3, #1
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80026a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026b2:	e002      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026b4:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x204>)
 80026b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3750      	adds	r7, #80	@ 0x50
 80026c0:	46bd      	mov	sp, r7
 80026c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800
 80026cc:	00f42400 	.word	0x00f42400
 80026d0:	007a1200 	.word	0x007a1200

080026d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d8:	4b03      	ldr	r3, [pc, #12]	@ (80026e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026da:	681b      	ldr	r3, [r3, #0]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	20000000 	.word	0x20000000

080026ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026f0:	f7ff fff0 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b05      	ldr	r3, [pc, #20]	@ (800270c <HAL_RCC_GetPCLK1Freq+0x20>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	0a9b      	lsrs	r3, r3, #10
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4903      	ldr	r1, [pc, #12]	@ (8002710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002702:	5ccb      	ldrb	r3, [r1, r3]
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40023800 	.word	0x40023800
 8002710:	08004c34 	.word	0x08004c34

08002714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002718:	f7ff ffdc 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b05      	ldr	r3, [pc, #20]	@ (8002734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	0b5b      	lsrs	r3, r3, #13
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4903      	ldr	r1, [pc, #12]	@ (8002738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40023800 	.word	0x40023800
 8002738:	08004c34 	.word	0x08004c34

0800273c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e041      	b.n	80027d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe fb7a 	bl	8000e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3304      	adds	r3, #4
 8002778:	4619      	mov	r1, r3
 800277a:	4610      	mov	r0, r2
 800277c:	f000 f9d2 	bl	8002b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d001      	beq.n	80027f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e03c      	b.n	800286e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1e      	ldr	r2, [pc, #120]	@ (800287c <HAL_TIM_Base_Start+0xa0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d018      	beq.n	8002838 <HAL_TIM_Base_Start+0x5c>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800280e:	d013      	beq.n	8002838 <HAL_TIM_Base_Start+0x5c>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1a      	ldr	r2, [pc, #104]	@ (8002880 <HAL_TIM_Base_Start+0xa4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00e      	beq.n	8002838 <HAL_TIM_Base_Start+0x5c>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a19      	ldr	r2, [pc, #100]	@ (8002884 <HAL_TIM_Base_Start+0xa8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d009      	beq.n	8002838 <HAL_TIM_Base_Start+0x5c>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a17      	ldr	r2, [pc, #92]	@ (8002888 <HAL_TIM_Base_Start+0xac>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d004      	beq.n	8002838 <HAL_TIM_Base_Start+0x5c>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a16      	ldr	r2, [pc, #88]	@ (800288c <HAL_TIM_Base_Start+0xb0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d111      	bne.n	800285c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b06      	cmp	r3, #6
 8002848:	d010      	beq.n	800286c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0201 	orr.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800285a:	e007      	b.n	800286c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40010000 	.word	0x40010000
 8002880:	40000400 	.word	0x40000400
 8002884:	40000800 	.word	0x40000800
 8002888:	40000c00 	.word	0x40000c00
 800288c:	40014000 	.word	0x40014000

08002890 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6a1a      	ldr	r2, [r3, #32]
 800289e:	f241 1311 	movw	r3, #4369	@ 0x1111
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10f      	bne.n	80028c8 <HAL_TIM_Base_Stop+0x38>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6a1a      	ldr	r2, [r3, #32]
 80028ae:	f240 4344 	movw	r3, #1092	@ 0x444
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d107      	bne.n	80028c8 <HAL_TIM_Base_Stop+0x38>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0201 	bic.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d020      	beq.n	8002942 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d01b      	beq.n	8002942 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f06f 0202 	mvn.w	r2, #2
 8002912:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f8dc 	bl	8002ae6 <HAL_TIM_IC_CaptureCallback>
 800292e:	e005      	b.n	800293c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f8ce 	bl	8002ad2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f8df 	bl	8002afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d020      	beq.n	800298e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d01b      	beq.n	800298e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f06f 0204 	mvn.w	r2, #4
 800295e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f8b6 	bl	8002ae6 <HAL_TIM_IC_CaptureCallback>
 800297a:	e005      	b.n	8002988 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f8a8 	bl	8002ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f8b9 	bl	8002afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d020      	beq.n	80029da <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d01b      	beq.n	80029da <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f06f 0208 	mvn.w	r2, #8
 80029aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2204      	movs	r2, #4
 80029b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f890 	bl	8002ae6 <HAL_TIM_IC_CaptureCallback>
 80029c6:	e005      	b.n	80029d4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f882 	bl	8002ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f893 	bl	8002afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d020      	beq.n	8002a26 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01b      	beq.n	8002a26 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f06f 0210 	mvn.w	r2, #16
 80029f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2208      	movs	r2, #8
 80029fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f86a 	bl	8002ae6 <HAL_TIM_IC_CaptureCallback>
 8002a12:	e005      	b.n	8002a20 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f85c 	bl	8002ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f86d 	bl	8002afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00c      	beq.n	8002a4a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d007      	beq.n	8002a4a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f06f 0201 	mvn.w	r2, #1
 8002a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f83a 	bl	8002abe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00c      	beq.n	8002a6e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f8f1 	bl	8002c50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00c      	beq.n	8002a92 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f83e 	bl	8002b0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00c      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f06f 0220 	mvn.w	r2, #32
 8002aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f8c3 	bl	8002c3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a3a      	ldr	r2, [pc, #232]	@ (8002c20 <TIM_Base_SetConfig+0xfc>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d00f      	beq.n	8002b5c <TIM_Base_SetConfig+0x38>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b42:	d00b      	beq.n	8002b5c <TIM_Base_SetConfig+0x38>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a37      	ldr	r2, [pc, #220]	@ (8002c24 <TIM_Base_SetConfig+0x100>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d007      	beq.n	8002b5c <TIM_Base_SetConfig+0x38>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a36      	ldr	r2, [pc, #216]	@ (8002c28 <TIM_Base_SetConfig+0x104>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d003      	beq.n	8002b5c <TIM_Base_SetConfig+0x38>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a35      	ldr	r2, [pc, #212]	@ (8002c2c <TIM_Base_SetConfig+0x108>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d108      	bne.n	8002b6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a2b      	ldr	r2, [pc, #172]	@ (8002c20 <TIM_Base_SetConfig+0xfc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d01b      	beq.n	8002bae <TIM_Base_SetConfig+0x8a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7c:	d017      	beq.n	8002bae <TIM_Base_SetConfig+0x8a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a28      	ldr	r2, [pc, #160]	@ (8002c24 <TIM_Base_SetConfig+0x100>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <TIM_Base_SetConfig+0x8a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a27      	ldr	r2, [pc, #156]	@ (8002c28 <TIM_Base_SetConfig+0x104>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00f      	beq.n	8002bae <TIM_Base_SetConfig+0x8a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a26      	ldr	r2, [pc, #152]	@ (8002c2c <TIM_Base_SetConfig+0x108>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00b      	beq.n	8002bae <TIM_Base_SetConfig+0x8a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a25      	ldr	r2, [pc, #148]	@ (8002c30 <TIM_Base_SetConfig+0x10c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d007      	beq.n	8002bae <TIM_Base_SetConfig+0x8a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a24      	ldr	r2, [pc, #144]	@ (8002c34 <TIM_Base_SetConfig+0x110>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d003      	beq.n	8002bae <TIM_Base_SetConfig+0x8a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a23      	ldr	r2, [pc, #140]	@ (8002c38 <TIM_Base_SetConfig+0x114>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d108      	bne.n	8002bc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a0e      	ldr	r2, [pc, #56]	@ (8002c20 <TIM_Base_SetConfig+0xfc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d103      	bne.n	8002bf4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d105      	bne.n	8002c12 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f023 0201 	bic.w	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	611a      	str	r2, [r3, #16]
  }
}
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40010000 	.word	0x40010000
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40000800 	.word	0x40000800
 8002c2c:	40000c00 	.word	0x40000c00
 8002c30:	40014000 	.word	0x40014000
 8002c34:	40014400 	.word	0x40014400
 8002c38:	40014800 	.word	0x40014800

08002c3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e042      	b.n	8002cfc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fe f938 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2224      	movs	r2, #36	@ 0x24
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fd69 	bl	8003780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	@ 0x28
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	4613      	mov	r3, r2
 8002d12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d175      	bne.n	8002e10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_UART_Transmit+0x2c>
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e06e      	b.n	8002e12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2221      	movs	r2, #33	@ 0x21
 8002d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d42:	f7fe f9ef 	bl	8001124 <HAL_GetTick>
 8002d46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	88fa      	ldrh	r2, [r7, #6]
 8002d4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	88fa      	ldrh	r2, [r7, #6]
 8002d52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d5c:	d108      	bne.n	8002d70 <HAL_UART_Transmit+0x6c>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d104      	bne.n	8002d70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	e003      	b.n	8002d78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d78:	e02e      	b.n	8002dd8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2200      	movs	r2, #0
 8002d82:	2180      	movs	r1, #128	@ 0x80
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 fb05 	bl	8003394 <UART_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e03a      	b.n	8002e12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10b      	bne.n	8002dba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002db0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	3302      	adds	r3, #2
 8002db6:	61bb      	str	r3, [r7, #24]
 8002db8:	e007      	b.n	8002dca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1cb      	bne.n	8002d7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2200      	movs	r2, #0
 8002dea:	2140      	movs	r1, #64	@ 0x40
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 fad1 	bl	8003394 <UART_WaitOnFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e006      	b.n	8002e12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e000      	b.n	8002e12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e10:	2302      	movs	r3, #2
  }
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3720      	adds	r7, #32
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b0ba      	sub	sp, #232	@ 0xe8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002e5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10f      	bne.n	8002e82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d009      	beq.n	8002e82 <HAL_UART_IRQHandler+0x66>
 8002e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fbc2 	bl	8003604 <UART_Receive_IT>
      return;
 8002e80:	e25b      	b.n	800333a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 80de 	beq.w	8003048 <HAL_UART_IRQHandler+0x22c>
 8002e8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d106      	bne.n	8002ea6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e9c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 80d1 	beq.w	8003048 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00b      	beq.n	8002eca <HAL_UART_IRQHandler+0xae>
 8002eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec2:	f043 0201 	orr.w	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00b      	beq.n	8002eee <HAL_UART_IRQHandler+0xd2>
 8002ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d005      	beq.n	8002eee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee6:	f043 0202 	orr.w	r2, r3, #2
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00b      	beq.n	8002f12 <HAL_UART_IRQHandler+0xf6>
 8002efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d005      	beq.n	8002f12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0a:	f043 0204 	orr.w	r2, r3, #4
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d011      	beq.n	8002f42 <HAL_UART_IRQHandler+0x126>
 8002f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d105      	bne.n	8002f36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	f043 0208 	orr.w	r2, r3, #8
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 81f2 	beq.w	8003330 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_UART_IRQHandler+0x14e>
 8002f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f5c:	f003 0320 	and.w	r3, r3, #32
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fb4d 	bl	8003604 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f74:	2b40      	cmp	r3, #64	@ 0x40
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d103      	bne.n	8002f96 <HAL_UART_IRQHandler+0x17a>
 8002f8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d04f      	beq.n	8003036 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fa55 	bl	8003446 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa6:	2b40      	cmp	r3, #64	@ 0x40
 8002fa8:	d141      	bne.n	800302e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3314      	adds	r3, #20
 8002fb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fb8:	e853 3f00 	ldrex	r3, [r3]
 8002fbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002fc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3314      	adds	r3, #20
 8002fd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002fd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002fda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002fe2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002fe6:	e841 2300 	strex	r3, r2, [r1]
 8002fea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002fee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1d9      	bne.n	8002faa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d013      	beq.n	8003026 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003002:	4a7e      	ldr	r2, [pc, #504]	@ (80031fc <HAL_UART_IRQHandler+0x3e0>)
 8003004:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe faea 	bl	80015e4 <HAL_DMA_Abort_IT>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d016      	beq.n	8003044 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003020:	4610      	mov	r0, r2
 8003022:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003024:	e00e      	b.n	8003044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f99e 	bl	8003368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800302c:	e00a      	b.n	8003044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f99a 	bl	8003368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003034:	e006      	b.n	8003044 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f996 	bl	8003368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003042:	e175      	b.n	8003330 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003044:	bf00      	nop
    return;
 8003046:	e173      	b.n	8003330 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304c:	2b01      	cmp	r3, #1
 800304e:	f040 814f 	bne.w	80032f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8148 	beq.w	80032f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 8141 	beq.w	80032f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800306e:	2300      	movs	r3, #0
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800308e:	2b40      	cmp	r3, #64	@ 0x40
 8003090:	f040 80b6 	bne.w	8003200 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8145 	beq.w	8003334 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80030ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030b2:	429a      	cmp	r2, r3
 80030b4:	f080 813e 	bcs.w	8003334 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ca:	f000 8088 	beq.w	80031de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	330c      	adds	r3, #12
 80030d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030dc:	e853 3f00 	ldrex	r3, [r3]
 80030e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80030e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	330c      	adds	r3, #12
 80030f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80030fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003102:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003106:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003112:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1d9      	bne.n	80030ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	3314      	adds	r3, #20
 8003120:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003122:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003124:	e853 3f00 	ldrex	r3, [r3]
 8003128:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800312a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800312c:	f023 0301 	bic.w	r3, r3, #1
 8003130:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3314      	adds	r3, #20
 800313a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800313e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003142:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003144:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003146:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800314a:	e841 2300 	strex	r3, r2, [r1]
 800314e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003150:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1e1      	bne.n	800311a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3314      	adds	r3, #20
 800315c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003160:	e853 3f00 	ldrex	r3, [r3]
 8003164:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003166:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003168:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800316c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3314      	adds	r3, #20
 8003176:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800317a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800317c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003180:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003182:	e841 2300 	strex	r3, r2, [r1]
 8003186:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003188:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1e3      	bne.n	8003156 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	330c      	adds	r3, #12
 80031a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031a6:	e853 3f00 	ldrex	r3, [r3]
 80031aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80031ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031ae:	f023 0310 	bic.w	r3, r3, #16
 80031b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	330c      	adds	r3, #12
 80031bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80031c0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80031c2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80031c8:	e841 2300 	strex	r3, r2, [r1]
 80031cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80031ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1e3      	bne.n	800319c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fe f993 	bl	8001504 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2202      	movs	r2, #2
 80031e2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	4619      	mov	r1, r3
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f8c1 	bl	800337c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031fa:	e09b      	b.n	8003334 <HAL_UART_IRQHandler+0x518>
 80031fc:	0800350d 	.word	0x0800350d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003208:	b29b      	uxth	r3, r3
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 808e 	beq.w	8003338 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800321c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8089 	beq.w	8003338 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	330c      	adds	r3, #12
 800322c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003230:	e853 3f00 	ldrex	r3, [r3]
 8003234:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003238:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800323c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	330c      	adds	r3, #12
 8003246:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800324a:	647a      	str	r2, [r7, #68]	@ 0x44
 800324c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003250:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003252:	e841 2300 	strex	r3, r2, [r1]
 8003256:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1e3      	bne.n	8003226 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3314      	adds	r3, #20
 8003264:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003268:	e853 3f00 	ldrex	r3, [r3]
 800326c:	623b      	str	r3, [r7, #32]
   return(result);
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3314      	adds	r3, #20
 800327e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003282:	633a      	str	r2, [r7, #48]	@ 0x30
 8003284:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003286:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800328a:	e841 2300 	strex	r3, r2, [r1]
 800328e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e3      	bne.n	800325e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	330c      	adds	r3, #12
 80032aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	e853 3f00 	ldrex	r3, [r3]
 80032b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0310 	bic.w	r3, r3, #16
 80032ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	330c      	adds	r3, #12
 80032c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80032c8:	61fa      	str	r2, [r7, #28]
 80032ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032cc:	69b9      	ldr	r1, [r7, #24]
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	e841 2300 	strex	r3, r2, [r1]
 80032d4:	617b      	str	r3, [r7, #20]
   return(result);
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1e3      	bne.n	80032a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032e6:	4619      	mov	r1, r3
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f847 	bl	800337c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032ee:	e023      	b.n	8003338 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d009      	beq.n	8003310 <HAL_UART_IRQHandler+0x4f4>
 80032fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f913 	bl	8003534 <UART_Transmit_IT>
    return;
 800330e:	e014      	b.n	800333a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00e      	beq.n	800333a <HAL_UART_IRQHandler+0x51e>
 800331c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f953 	bl	80035d4 <UART_EndTransmit_IT>
    return;
 800332e:	e004      	b.n	800333a <HAL_UART_IRQHandler+0x51e>
    return;
 8003330:	bf00      	nop
 8003332:	e002      	b.n	800333a <HAL_UART_IRQHandler+0x51e>
      return;
 8003334:	bf00      	nop
 8003336:	e000      	b.n	800333a <HAL_UART_IRQHandler+0x51e>
      return;
 8003338:	bf00      	nop
  }
}
 800333a:	37e8      	adds	r7, #232	@ 0xe8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	4613      	mov	r3, r2
 80033a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a4:	e03b      	b.n	800341e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ac:	d037      	beq.n	800341e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ae:	f7fd feb9 	bl	8001124 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	6a3a      	ldr	r2, [r7, #32]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d302      	bcc.n	80033c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e03a      	b.n	800343e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d023      	beq.n	800341e <UART_WaitOnFlagUntilTimeout+0x8a>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b80      	cmp	r3, #128	@ 0x80
 80033da:	d020      	beq.n	800341e <UART_WaitOnFlagUntilTimeout+0x8a>
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b40      	cmp	r3, #64	@ 0x40
 80033e0:	d01d      	beq.n	800341e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d116      	bne.n	800341e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 f81d 	bl	8003446 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2208      	movs	r2, #8
 8003410:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e00f      	b.n	800343e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4013      	ands	r3, r2
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	429a      	cmp	r2, r3
 800342c:	bf0c      	ite	eq
 800342e:	2301      	moveq	r3, #1
 8003430:	2300      	movne	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	429a      	cmp	r2, r3
 800343a:	d0b4      	beq.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003446:	b480      	push	{r7}
 8003448:	b095      	sub	sp, #84	@ 0x54
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	330c      	adds	r3, #12
 8003454:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003458:	e853 3f00 	ldrex	r3, [r3]
 800345c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800345e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003460:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003464:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	330c      	adds	r3, #12
 800346c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800346e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003470:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003472:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003474:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003476:	e841 2300 	strex	r3, r2, [r1]
 800347a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800347c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1e5      	bne.n	800344e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3314      	adds	r3, #20
 8003488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	e853 3f00 	ldrex	r3, [r3]
 8003490:	61fb      	str	r3, [r7, #28]
   return(result);
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	64bb      	str	r3, [r7, #72]	@ 0x48
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3314      	adds	r3, #20
 80034a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034aa:	e841 2300 	strex	r3, r2, [r1]
 80034ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1e5      	bne.n	8003482 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d119      	bne.n	80034f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	330c      	adds	r3, #12
 80034c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	f023 0310 	bic.w	r3, r3, #16
 80034d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	330c      	adds	r3, #12
 80034dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034de:	61ba      	str	r2, [r7, #24]
 80034e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e2:	6979      	ldr	r1, [r7, #20]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	e841 2300 	strex	r3, r2, [r1]
 80034ea:	613b      	str	r3, [r7, #16]
   return(result);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1e5      	bne.n	80034be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003500:	bf00      	nop
 8003502:	3754      	adds	r7, #84	@ 0x54
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003518:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f7ff ff1e 	bl	8003368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800352c:	bf00      	nop
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b21      	cmp	r3, #33	@ 0x21
 8003546:	d13e      	bne.n	80035c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003550:	d114      	bne.n	800357c <UART_Transmit_IT+0x48>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d110      	bne.n	800357c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800356e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	1c9a      	adds	r2, r3, #2
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	621a      	str	r2, [r3, #32]
 800357a:	e008      	b.n	800358e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	1c59      	adds	r1, r3, #1
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6211      	str	r1, [r2, #32]
 8003586:	781a      	ldrb	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003592:	b29b      	uxth	r3, r3
 8003594:	3b01      	subs	r3, #1
 8003596:	b29b      	uxth	r3, r3
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	4619      	mov	r1, r3
 800359c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10f      	bne.n	80035c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	e000      	b.n	80035c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035c6:	2302      	movs	r3, #2
  }
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7ff fea3 	bl	8003340 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08c      	sub	sp, #48	@ 0x30
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b22      	cmp	r3, #34	@ 0x22
 8003616:	f040 80ae 	bne.w	8003776 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003622:	d117      	bne.n	8003654 <UART_Receive_IT+0x50>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d113      	bne.n	8003654 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800362c:	2300      	movs	r3, #0
 800362e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003634:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	b29b      	uxth	r3, r3
 800363e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003642:	b29a      	uxth	r2, r3
 8003644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003646:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364c:	1c9a      	adds	r2, r3, #2
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	629a      	str	r2, [r3, #40]	@ 0x28
 8003652:	e026      	b.n	80036a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003658:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800365a:	2300      	movs	r3, #0
 800365c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003666:	d007      	beq.n	8003678 <UART_Receive_IT+0x74>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <UART_Receive_IT+0x82>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d106      	bne.n	8003686 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	b2da      	uxtb	r2, r3
 8003680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003682:	701a      	strb	r2, [r3, #0]
 8003684:	e008      	b.n	8003698 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003692:	b2da      	uxtb	r2, r3
 8003694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003696:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4619      	mov	r1, r3
 80036b0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d15d      	bne.n	8003772 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0220 	bic.w	r2, r2, #32
 80036c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0201 	bic.w	r2, r2, #1
 80036e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d135      	bne.n	8003768 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	330c      	adds	r3, #12
 8003708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	e853 3f00 	ldrex	r3, [r3]
 8003710:	613b      	str	r3, [r7, #16]
   return(result);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f023 0310 	bic.w	r3, r3, #16
 8003718:	627b      	str	r3, [r7, #36]	@ 0x24
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	330c      	adds	r3, #12
 8003720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003722:	623a      	str	r2, [r7, #32]
 8003724:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003726:	69f9      	ldr	r1, [r7, #28]
 8003728:	6a3a      	ldr	r2, [r7, #32]
 800372a:	e841 2300 	strex	r3, r2, [r1]
 800372e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1e5      	bne.n	8003702 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0310 	and.w	r3, r3, #16
 8003740:	2b10      	cmp	r3, #16
 8003742:	d10a      	bne.n	800375a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800375e:	4619      	mov	r1, r3
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff fe0b 	bl	800337c <HAL_UARTEx_RxEventCallback>
 8003766:	e002      	b.n	800376e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff fdf3 	bl	8003354 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	e002      	b.n	8003778 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	e000      	b.n	8003778 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003776:	2302      	movs	r3, #2
  }
}
 8003778:	4618      	mov	r0, r3
 800377a:	3730      	adds	r7, #48	@ 0x30
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003784:	b0c0      	sub	sp, #256	@ 0x100
 8003786:	af00      	add	r7, sp, #0
 8003788:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800378c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379c:	68d9      	ldr	r1, [r3, #12]
 800379e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	ea40 0301 	orr.w	r3, r0, r1
 80037a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	431a      	orrs	r2, r3
 80037c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80037d8:	f021 010c 	bic.w	r1, r1, #12
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037e6:	430b      	orrs	r3, r1
 80037e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80037f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fa:	6999      	ldr	r1, [r3, #24]
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	ea40 0301 	orr.w	r3, r0, r1
 8003806:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	4b8f      	ldr	r3, [pc, #572]	@ (8003a4c <UART_SetConfig+0x2cc>)
 8003810:	429a      	cmp	r2, r3
 8003812:	d005      	beq.n	8003820 <UART_SetConfig+0xa0>
 8003814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4b8d      	ldr	r3, [pc, #564]	@ (8003a50 <UART_SetConfig+0x2d0>)
 800381c:	429a      	cmp	r2, r3
 800381e:	d104      	bne.n	800382a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003820:	f7fe ff78 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 8003824:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003828:	e003      	b.n	8003832 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800382a:	f7fe ff5f 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 800382e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800383c:	f040 810c 	bne.w	8003a58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003844:	2200      	movs	r2, #0
 8003846:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800384a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800384e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003852:	4622      	mov	r2, r4
 8003854:	462b      	mov	r3, r5
 8003856:	1891      	adds	r1, r2, r2
 8003858:	65b9      	str	r1, [r7, #88]	@ 0x58
 800385a:	415b      	adcs	r3, r3
 800385c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800385e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003862:	4621      	mov	r1, r4
 8003864:	eb12 0801 	adds.w	r8, r2, r1
 8003868:	4629      	mov	r1, r5
 800386a:	eb43 0901 	adc.w	r9, r3, r1
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800387a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800387e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003882:	4690      	mov	r8, r2
 8003884:	4699      	mov	r9, r3
 8003886:	4623      	mov	r3, r4
 8003888:	eb18 0303 	adds.w	r3, r8, r3
 800388c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003890:	462b      	mov	r3, r5
 8003892:	eb49 0303 	adc.w	r3, r9, r3
 8003896:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800389a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80038aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038ae:	460b      	mov	r3, r1
 80038b0:	18db      	adds	r3, r3, r3
 80038b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80038b4:	4613      	mov	r3, r2
 80038b6:	eb42 0303 	adc.w	r3, r2, r3
 80038ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80038bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80038c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80038c4:	f7fc fcdc 	bl	8000280 <__aeabi_uldivmod>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4b61      	ldr	r3, [pc, #388]	@ (8003a54 <UART_SetConfig+0x2d4>)
 80038ce:	fba3 2302 	umull	r2, r3, r3, r2
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	011c      	lsls	r4, r3, #4
 80038d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038da:	2200      	movs	r2, #0
 80038dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038e8:	4642      	mov	r2, r8
 80038ea:	464b      	mov	r3, r9
 80038ec:	1891      	adds	r1, r2, r2
 80038ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80038f0:	415b      	adcs	r3, r3
 80038f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038f8:	4641      	mov	r1, r8
 80038fa:	eb12 0a01 	adds.w	sl, r2, r1
 80038fe:	4649      	mov	r1, r9
 8003900:	eb43 0b01 	adc.w	fp, r3, r1
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003910:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003918:	4692      	mov	sl, r2
 800391a:	469b      	mov	fp, r3
 800391c:	4643      	mov	r3, r8
 800391e:	eb1a 0303 	adds.w	r3, sl, r3
 8003922:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003926:	464b      	mov	r3, r9
 8003928:	eb4b 0303 	adc.w	r3, fp, r3
 800392c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800393c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003940:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003944:	460b      	mov	r3, r1
 8003946:	18db      	adds	r3, r3, r3
 8003948:	643b      	str	r3, [r7, #64]	@ 0x40
 800394a:	4613      	mov	r3, r2
 800394c:	eb42 0303 	adc.w	r3, r2, r3
 8003950:	647b      	str	r3, [r7, #68]	@ 0x44
 8003952:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003956:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800395a:	f7fc fc91 	bl	8000280 <__aeabi_uldivmod>
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	4611      	mov	r1, r2
 8003964:	4b3b      	ldr	r3, [pc, #236]	@ (8003a54 <UART_SetConfig+0x2d4>)
 8003966:	fba3 2301 	umull	r2, r3, r3, r1
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	2264      	movs	r2, #100	@ 0x64
 800396e:	fb02 f303 	mul.w	r3, r2, r3
 8003972:	1acb      	subs	r3, r1, r3
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800397a:	4b36      	ldr	r3, [pc, #216]	@ (8003a54 <UART_SetConfig+0x2d4>)
 800397c:	fba3 2302 	umull	r2, r3, r3, r2
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003988:	441c      	add	r4, r3
 800398a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800398e:	2200      	movs	r2, #0
 8003990:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003994:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003998:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800399c:	4642      	mov	r2, r8
 800399e:	464b      	mov	r3, r9
 80039a0:	1891      	adds	r1, r2, r2
 80039a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039a4:	415b      	adcs	r3, r3
 80039a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80039ac:	4641      	mov	r1, r8
 80039ae:	1851      	adds	r1, r2, r1
 80039b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80039b2:	4649      	mov	r1, r9
 80039b4:	414b      	adcs	r3, r1
 80039b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80039c4:	4659      	mov	r1, fp
 80039c6:	00cb      	lsls	r3, r1, #3
 80039c8:	4651      	mov	r1, sl
 80039ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ce:	4651      	mov	r1, sl
 80039d0:	00ca      	lsls	r2, r1, #3
 80039d2:	4610      	mov	r0, r2
 80039d4:	4619      	mov	r1, r3
 80039d6:	4603      	mov	r3, r0
 80039d8:	4642      	mov	r2, r8
 80039da:	189b      	adds	r3, r3, r2
 80039dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039e0:	464b      	mov	r3, r9
 80039e2:	460a      	mov	r2, r1
 80039e4:	eb42 0303 	adc.w	r3, r2, r3
 80039e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80039fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a00:	460b      	mov	r3, r1
 8003a02:	18db      	adds	r3, r3, r3
 8003a04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a06:	4613      	mov	r3, r2
 8003a08:	eb42 0303 	adc.w	r3, r2, r3
 8003a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a16:	f7fc fc33 	bl	8000280 <__aeabi_uldivmod>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a54 <UART_SetConfig+0x2d4>)
 8003a20:	fba3 1302 	umull	r1, r3, r3, r2
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	2164      	movs	r1, #100	@ 0x64
 8003a28:	fb01 f303 	mul.w	r3, r1, r3
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	3332      	adds	r3, #50	@ 0x32
 8003a32:	4a08      	ldr	r2, [pc, #32]	@ (8003a54 <UART_SetConfig+0x2d4>)
 8003a34:	fba2 2303 	umull	r2, r3, r2, r3
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	f003 0207 	and.w	r2, r3, #7
 8003a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4422      	add	r2, r4
 8003a46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a48:	e106      	b.n	8003c58 <UART_SetConfig+0x4d8>
 8003a4a:	bf00      	nop
 8003a4c:	40011000 	.word	0x40011000
 8003a50:	40011400 	.word	0x40011400
 8003a54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a6a:	4642      	mov	r2, r8
 8003a6c:	464b      	mov	r3, r9
 8003a6e:	1891      	adds	r1, r2, r2
 8003a70:	6239      	str	r1, [r7, #32]
 8003a72:	415b      	adcs	r3, r3
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a7a:	4641      	mov	r1, r8
 8003a7c:	1854      	adds	r4, r2, r1
 8003a7e:	4649      	mov	r1, r9
 8003a80:	eb43 0501 	adc.w	r5, r3, r1
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	00eb      	lsls	r3, r5, #3
 8003a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a92:	00e2      	lsls	r2, r4, #3
 8003a94:	4614      	mov	r4, r2
 8003a96:	461d      	mov	r5, r3
 8003a98:	4643      	mov	r3, r8
 8003a9a:	18e3      	adds	r3, r4, r3
 8003a9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003aa0:	464b      	mov	r3, r9
 8003aa2:	eb45 0303 	adc.w	r3, r5, r3
 8003aa6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ab6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	008b      	lsls	r3, r1, #2
 8003aca:	4621      	mov	r1, r4
 8003acc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	008a      	lsls	r2, r1, #2
 8003ad4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ad8:	f7fc fbd2 	bl	8000280 <__aeabi_uldivmod>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4b60      	ldr	r3, [pc, #384]	@ (8003c64 <UART_SetConfig+0x4e4>)
 8003ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	011c      	lsls	r4, r3, #4
 8003aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003af4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003af8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003afc:	4642      	mov	r2, r8
 8003afe:	464b      	mov	r3, r9
 8003b00:	1891      	adds	r1, r2, r2
 8003b02:	61b9      	str	r1, [r7, #24]
 8003b04:	415b      	adcs	r3, r3
 8003b06:	61fb      	str	r3, [r7, #28]
 8003b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b0c:	4641      	mov	r1, r8
 8003b0e:	1851      	adds	r1, r2, r1
 8003b10:	6139      	str	r1, [r7, #16]
 8003b12:	4649      	mov	r1, r9
 8003b14:	414b      	adcs	r3, r1
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b24:	4659      	mov	r1, fp
 8003b26:	00cb      	lsls	r3, r1, #3
 8003b28:	4651      	mov	r1, sl
 8003b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b2e:	4651      	mov	r1, sl
 8003b30:	00ca      	lsls	r2, r1, #3
 8003b32:	4610      	mov	r0, r2
 8003b34:	4619      	mov	r1, r3
 8003b36:	4603      	mov	r3, r0
 8003b38:	4642      	mov	r2, r8
 8003b3a:	189b      	adds	r3, r3, r2
 8003b3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b40:	464b      	mov	r3, r9
 8003b42:	460a      	mov	r2, r1
 8003b44:	eb42 0303 	adc.w	r3, r2, r3
 8003b48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b64:	4649      	mov	r1, r9
 8003b66:	008b      	lsls	r3, r1, #2
 8003b68:	4641      	mov	r1, r8
 8003b6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b6e:	4641      	mov	r1, r8
 8003b70:	008a      	lsls	r2, r1, #2
 8003b72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b76:	f7fc fb83 	bl	8000280 <__aeabi_uldivmod>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4611      	mov	r1, r2
 8003b80:	4b38      	ldr	r3, [pc, #224]	@ (8003c64 <UART_SetConfig+0x4e4>)
 8003b82:	fba3 2301 	umull	r2, r3, r3, r1
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	2264      	movs	r2, #100	@ 0x64
 8003b8a:	fb02 f303 	mul.w	r3, r2, r3
 8003b8e:	1acb      	subs	r3, r1, r3
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	3332      	adds	r3, #50	@ 0x32
 8003b94:	4a33      	ldr	r2, [pc, #204]	@ (8003c64 <UART_SetConfig+0x4e4>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ba0:	441c      	add	r4, r3
 8003ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003baa:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003bb0:	4642      	mov	r2, r8
 8003bb2:	464b      	mov	r3, r9
 8003bb4:	1891      	adds	r1, r2, r2
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	415b      	adcs	r3, r3
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bc0:	4641      	mov	r1, r8
 8003bc2:	1851      	adds	r1, r2, r1
 8003bc4:	6039      	str	r1, [r7, #0]
 8003bc6:	4649      	mov	r1, r9
 8003bc8:	414b      	adcs	r3, r1
 8003bca:	607b      	str	r3, [r7, #4]
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bd8:	4659      	mov	r1, fp
 8003bda:	00cb      	lsls	r3, r1, #3
 8003bdc:	4651      	mov	r1, sl
 8003bde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003be2:	4651      	mov	r1, sl
 8003be4:	00ca      	lsls	r2, r1, #3
 8003be6:	4610      	mov	r0, r2
 8003be8:	4619      	mov	r1, r3
 8003bea:	4603      	mov	r3, r0
 8003bec:	4642      	mov	r2, r8
 8003bee:	189b      	adds	r3, r3, r2
 8003bf0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bf2:	464b      	mov	r3, r9
 8003bf4:	460a      	mov	r2, r1
 8003bf6:	eb42 0303 	adc.w	r3, r2, r3
 8003bfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c06:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c14:	4649      	mov	r1, r9
 8003c16:	008b      	lsls	r3, r1, #2
 8003c18:	4641      	mov	r1, r8
 8003c1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c1e:	4641      	mov	r1, r8
 8003c20:	008a      	lsls	r2, r1, #2
 8003c22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c26:	f7fc fb2b 	bl	8000280 <__aeabi_uldivmod>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c64 <UART_SetConfig+0x4e4>)
 8003c30:	fba3 1302 	umull	r1, r3, r3, r2
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	2164      	movs	r1, #100	@ 0x64
 8003c38:	fb01 f303 	mul.w	r3, r1, r3
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	3332      	adds	r3, #50	@ 0x32
 8003c42:	4a08      	ldr	r2, [pc, #32]	@ (8003c64 <UART_SetConfig+0x4e4>)
 8003c44:	fba2 2303 	umull	r2, r3, r2, r3
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	f003 020f 	and.w	r2, r3, #15
 8003c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4422      	add	r2, r4
 8003c56:	609a      	str	r2, [r3, #8]
}
 8003c58:	bf00      	nop
 8003c5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c64:	51eb851f 	.word	0x51eb851f

08003c68 <std>:
 8003c68:	2300      	movs	r3, #0
 8003c6a:	b510      	push	{r4, lr}
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	e9c0 3300 	strd	r3, r3, [r0]
 8003c72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c76:	6083      	str	r3, [r0, #8]
 8003c78:	8181      	strh	r1, [r0, #12]
 8003c7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c7c:	81c2      	strh	r2, [r0, #14]
 8003c7e:	6183      	str	r3, [r0, #24]
 8003c80:	4619      	mov	r1, r3
 8003c82:	2208      	movs	r2, #8
 8003c84:	305c      	adds	r0, #92	@ 0x5c
 8003c86:	f000 f9f9 	bl	800407c <memset>
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc0 <std+0x58>)
 8003c8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc4 <std+0x5c>)
 8003c90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c92:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc8 <std+0x60>)
 8003c94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ccc <std+0x64>)
 8003c98:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd0 <std+0x68>)
 8003c9c:	6224      	str	r4, [r4, #32]
 8003c9e:	429c      	cmp	r4, r3
 8003ca0:	d006      	beq.n	8003cb0 <std+0x48>
 8003ca2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003ca6:	4294      	cmp	r4, r2
 8003ca8:	d002      	beq.n	8003cb0 <std+0x48>
 8003caa:	33d0      	adds	r3, #208	@ 0xd0
 8003cac:	429c      	cmp	r4, r3
 8003cae:	d105      	bne.n	8003cbc <std+0x54>
 8003cb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cb8:	f000 ba58 	b.w	800416c <__retarget_lock_init_recursive>
 8003cbc:	bd10      	pop	{r4, pc}
 8003cbe:	bf00      	nop
 8003cc0:	08003ecd 	.word	0x08003ecd
 8003cc4:	08003eef 	.word	0x08003eef
 8003cc8:	08003f27 	.word	0x08003f27
 8003ccc:	08003f4b 	.word	0x08003f4b
 8003cd0:	20000184 	.word	0x20000184

08003cd4 <stdio_exit_handler>:
 8003cd4:	4a02      	ldr	r2, [pc, #8]	@ (8003ce0 <stdio_exit_handler+0xc>)
 8003cd6:	4903      	ldr	r1, [pc, #12]	@ (8003ce4 <stdio_exit_handler+0x10>)
 8003cd8:	4803      	ldr	r0, [pc, #12]	@ (8003ce8 <stdio_exit_handler+0x14>)
 8003cda:	f000 b869 	b.w	8003db0 <_fwalk_sglue>
 8003cde:	bf00      	nop
 8003ce0:	2000000c 	.word	0x2000000c
 8003ce4:	08004a0d 	.word	0x08004a0d
 8003ce8:	2000001c 	.word	0x2000001c

08003cec <cleanup_stdio>:
 8003cec:	6841      	ldr	r1, [r0, #4]
 8003cee:	4b0c      	ldr	r3, [pc, #48]	@ (8003d20 <cleanup_stdio+0x34>)
 8003cf0:	4299      	cmp	r1, r3
 8003cf2:	b510      	push	{r4, lr}
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	d001      	beq.n	8003cfc <cleanup_stdio+0x10>
 8003cf8:	f000 fe88 	bl	8004a0c <_fflush_r>
 8003cfc:	68a1      	ldr	r1, [r4, #8]
 8003cfe:	4b09      	ldr	r3, [pc, #36]	@ (8003d24 <cleanup_stdio+0x38>)
 8003d00:	4299      	cmp	r1, r3
 8003d02:	d002      	beq.n	8003d0a <cleanup_stdio+0x1e>
 8003d04:	4620      	mov	r0, r4
 8003d06:	f000 fe81 	bl	8004a0c <_fflush_r>
 8003d0a:	68e1      	ldr	r1, [r4, #12]
 8003d0c:	4b06      	ldr	r3, [pc, #24]	@ (8003d28 <cleanup_stdio+0x3c>)
 8003d0e:	4299      	cmp	r1, r3
 8003d10:	d004      	beq.n	8003d1c <cleanup_stdio+0x30>
 8003d12:	4620      	mov	r0, r4
 8003d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d18:	f000 be78 	b.w	8004a0c <_fflush_r>
 8003d1c:	bd10      	pop	{r4, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000184 	.word	0x20000184
 8003d24:	200001ec 	.word	0x200001ec
 8003d28:	20000254 	.word	0x20000254

08003d2c <global_stdio_init.part.0>:
 8003d2c:	b510      	push	{r4, lr}
 8003d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d5c <global_stdio_init.part.0+0x30>)
 8003d30:	4c0b      	ldr	r4, [pc, #44]	@ (8003d60 <global_stdio_init.part.0+0x34>)
 8003d32:	4a0c      	ldr	r2, [pc, #48]	@ (8003d64 <global_stdio_init.part.0+0x38>)
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	4620      	mov	r0, r4
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2104      	movs	r1, #4
 8003d3c:	f7ff ff94 	bl	8003c68 <std>
 8003d40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d44:	2201      	movs	r2, #1
 8003d46:	2109      	movs	r1, #9
 8003d48:	f7ff ff8e 	bl	8003c68 <std>
 8003d4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d50:	2202      	movs	r2, #2
 8003d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d56:	2112      	movs	r1, #18
 8003d58:	f7ff bf86 	b.w	8003c68 <std>
 8003d5c:	200002bc 	.word	0x200002bc
 8003d60:	20000184 	.word	0x20000184
 8003d64:	08003cd5 	.word	0x08003cd5

08003d68 <__sfp_lock_acquire>:
 8003d68:	4801      	ldr	r0, [pc, #4]	@ (8003d70 <__sfp_lock_acquire+0x8>)
 8003d6a:	f000 ba00 	b.w	800416e <__retarget_lock_acquire_recursive>
 8003d6e:	bf00      	nop
 8003d70:	200002c5 	.word	0x200002c5

08003d74 <__sfp_lock_release>:
 8003d74:	4801      	ldr	r0, [pc, #4]	@ (8003d7c <__sfp_lock_release+0x8>)
 8003d76:	f000 b9fb 	b.w	8004170 <__retarget_lock_release_recursive>
 8003d7a:	bf00      	nop
 8003d7c:	200002c5 	.word	0x200002c5

08003d80 <__sinit>:
 8003d80:	b510      	push	{r4, lr}
 8003d82:	4604      	mov	r4, r0
 8003d84:	f7ff fff0 	bl	8003d68 <__sfp_lock_acquire>
 8003d88:	6a23      	ldr	r3, [r4, #32]
 8003d8a:	b11b      	cbz	r3, 8003d94 <__sinit+0x14>
 8003d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d90:	f7ff bff0 	b.w	8003d74 <__sfp_lock_release>
 8003d94:	4b04      	ldr	r3, [pc, #16]	@ (8003da8 <__sinit+0x28>)
 8003d96:	6223      	str	r3, [r4, #32]
 8003d98:	4b04      	ldr	r3, [pc, #16]	@ (8003dac <__sinit+0x2c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1f5      	bne.n	8003d8c <__sinit+0xc>
 8003da0:	f7ff ffc4 	bl	8003d2c <global_stdio_init.part.0>
 8003da4:	e7f2      	b.n	8003d8c <__sinit+0xc>
 8003da6:	bf00      	nop
 8003da8:	08003ced 	.word	0x08003ced
 8003dac:	200002bc 	.word	0x200002bc

08003db0 <_fwalk_sglue>:
 8003db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003db4:	4607      	mov	r7, r0
 8003db6:	4688      	mov	r8, r1
 8003db8:	4614      	mov	r4, r2
 8003dba:	2600      	movs	r6, #0
 8003dbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003dc0:	f1b9 0901 	subs.w	r9, r9, #1
 8003dc4:	d505      	bpl.n	8003dd2 <_fwalk_sglue+0x22>
 8003dc6:	6824      	ldr	r4, [r4, #0]
 8003dc8:	2c00      	cmp	r4, #0
 8003dca:	d1f7      	bne.n	8003dbc <_fwalk_sglue+0xc>
 8003dcc:	4630      	mov	r0, r6
 8003dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dd2:	89ab      	ldrh	r3, [r5, #12]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d907      	bls.n	8003de8 <_fwalk_sglue+0x38>
 8003dd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	d003      	beq.n	8003de8 <_fwalk_sglue+0x38>
 8003de0:	4629      	mov	r1, r5
 8003de2:	4638      	mov	r0, r7
 8003de4:	47c0      	blx	r8
 8003de6:	4306      	orrs	r6, r0
 8003de8:	3568      	adds	r5, #104	@ 0x68
 8003dea:	e7e9      	b.n	8003dc0 <_fwalk_sglue+0x10>

08003dec <iprintf>:
 8003dec:	b40f      	push	{r0, r1, r2, r3}
 8003dee:	b507      	push	{r0, r1, r2, lr}
 8003df0:	4906      	ldr	r1, [pc, #24]	@ (8003e0c <iprintf+0x20>)
 8003df2:	ab04      	add	r3, sp, #16
 8003df4:	6808      	ldr	r0, [r1, #0]
 8003df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dfa:	6881      	ldr	r1, [r0, #8]
 8003dfc:	9301      	str	r3, [sp, #4]
 8003dfe:	f000 fadb 	bl	80043b8 <_vfiprintf_r>
 8003e02:	b003      	add	sp, #12
 8003e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e08:	b004      	add	sp, #16
 8003e0a:	4770      	bx	lr
 8003e0c:	20000018 	.word	0x20000018

08003e10 <_puts_r>:
 8003e10:	6a03      	ldr	r3, [r0, #32]
 8003e12:	b570      	push	{r4, r5, r6, lr}
 8003e14:	6884      	ldr	r4, [r0, #8]
 8003e16:	4605      	mov	r5, r0
 8003e18:	460e      	mov	r6, r1
 8003e1a:	b90b      	cbnz	r3, 8003e20 <_puts_r+0x10>
 8003e1c:	f7ff ffb0 	bl	8003d80 <__sinit>
 8003e20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e22:	07db      	lsls	r3, r3, #31
 8003e24:	d405      	bmi.n	8003e32 <_puts_r+0x22>
 8003e26:	89a3      	ldrh	r3, [r4, #12]
 8003e28:	0598      	lsls	r0, r3, #22
 8003e2a:	d402      	bmi.n	8003e32 <_puts_r+0x22>
 8003e2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e2e:	f000 f99e 	bl	800416e <__retarget_lock_acquire_recursive>
 8003e32:	89a3      	ldrh	r3, [r4, #12]
 8003e34:	0719      	lsls	r1, r3, #28
 8003e36:	d502      	bpl.n	8003e3e <_puts_r+0x2e>
 8003e38:	6923      	ldr	r3, [r4, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d135      	bne.n	8003eaa <_puts_r+0x9a>
 8003e3e:	4621      	mov	r1, r4
 8003e40:	4628      	mov	r0, r5
 8003e42:	f000 f8c5 	bl	8003fd0 <__swsetup_r>
 8003e46:	b380      	cbz	r0, 8003eaa <_puts_r+0x9a>
 8003e48:	f04f 35ff 	mov.w	r5, #4294967295
 8003e4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e4e:	07da      	lsls	r2, r3, #31
 8003e50:	d405      	bmi.n	8003e5e <_puts_r+0x4e>
 8003e52:	89a3      	ldrh	r3, [r4, #12]
 8003e54:	059b      	lsls	r3, r3, #22
 8003e56:	d402      	bmi.n	8003e5e <_puts_r+0x4e>
 8003e58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e5a:	f000 f989 	bl	8004170 <__retarget_lock_release_recursive>
 8003e5e:	4628      	mov	r0, r5
 8003e60:	bd70      	pop	{r4, r5, r6, pc}
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	da04      	bge.n	8003e70 <_puts_r+0x60>
 8003e66:	69a2      	ldr	r2, [r4, #24]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	dc17      	bgt.n	8003e9c <_puts_r+0x8c>
 8003e6c:	290a      	cmp	r1, #10
 8003e6e:	d015      	beq.n	8003e9c <_puts_r+0x8c>
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	6022      	str	r2, [r4, #0]
 8003e76:	7019      	strb	r1, [r3, #0]
 8003e78:	68a3      	ldr	r3, [r4, #8]
 8003e7a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	60a3      	str	r3, [r4, #8]
 8003e82:	2900      	cmp	r1, #0
 8003e84:	d1ed      	bne.n	8003e62 <_puts_r+0x52>
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	da11      	bge.n	8003eae <_puts_r+0x9e>
 8003e8a:	4622      	mov	r2, r4
 8003e8c:	210a      	movs	r1, #10
 8003e8e:	4628      	mov	r0, r5
 8003e90:	f000 f85f 	bl	8003f52 <__swbuf_r>
 8003e94:	3001      	adds	r0, #1
 8003e96:	d0d7      	beq.n	8003e48 <_puts_r+0x38>
 8003e98:	250a      	movs	r5, #10
 8003e9a:	e7d7      	b.n	8003e4c <_puts_r+0x3c>
 8003e9c:	4622      	mov	r2, r4
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	f000 f857 	bl	8003f52 <__swbuf_r>
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	d1e7      	bne.n	8003e78 <_puts_r+0x68>
 8003ea8:	e7ce      	b.n	8003e48 <_puts_r+0x38>
 8003eaa:	3e01      	subs	r6, #1
 8003eac:	e7e4      	b.n	8003e78 <_puts_r+0x68>
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	6022      	str	r2, [r4, #0]
 8003eb4:	220a      	movs	r2, #10
 8003eb6:	701a      	strb	r2, [r3, #0]
 8003eb8:	e7ee      	b.n	8003e98 <_puts_r+0x88>
	...

08003ebc <puts>:
 8003ebc:	4b02      	ldr	r3, [pc, #8]	@ (8003ec8 <puts+0xc>)
 8003ebe:	4601      	mov	r1, r0
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	f7ff bfa5 	b.w	8003e10 <_puts_r>
 8003ec6:	bf00      	nop
 8003ec8:	20000018 	.word	0x20000018

08003ecc <__sread>:
 8003ecc:	b510      	push	{r4, lr}
 8003ece:	460c      	mov	r4, r1
 8003ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed4:	f000 f8fc 	bl	80040d0 <_read_r>
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	bfab      	itete	ge
 8003edc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003ede:	89a3      	ldrhlt	r3, [r4, #12]
 8003ee0:	181b      	addge	r3, r3, r0
 8003ee2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003ee6:	bfac      	ite	ge
 8003ee8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003eea:	81a3      	strhlt	r3, [r4, #12]
 8003eec:	bd10      	pop	{r4, pc}

08003eee <__swrite>:
 8003eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef2:	461f      	mov	r7, r3
 8003ef4:	898b      	ldrh	r3, [r1, #12]
 8003ef6:	05db      	lsls	r3, r3, #23
 8003ef8:	4605      	mov	r5, r0
 8003efa:	460c      	mov	r4, r1
 8003efc:	4616      	mov	r6, r2
 8003efe:	d505      	bpl.n	8003f0c <__swrite+0x1e>
 8003f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f04:	2302      	movs	r3, #2
 8003f06:	2200      	movs	r2, #0
 8003f08:	f000 f8d0 	bl	80040ac <_lseek_r>
 8003f0c:	89a3      	ldrh	r3, [r4, #12]
 8003f0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f16:	81a3      	strh	r3, [r4, #12]
 8003f18:	4632      	mov	r2, r6
 8003f1a:	463b      	mov	r3, r7
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f22:	f000 b8e7 	b.w	80040f4 <_write_r>

08003f26 <__sseek>:
 8003f26:	b510      	push	{r4, lr}
 8003f28:	460c      	mov	r4, r1
 8003f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f2e:	f000 f8bd 	bl	80040ac <_lseek_r>
 8003f32:	1c43      	adds	r3, r0, #1
 8003f34:	89a3      	ldrh	r3, [r4, #12]
 8003f36:	bf15      	itete	ne
 8003f38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f42:	81a3      	strheq	r3, [r4, #12]
 8003f44:	bf18      	it	ne
 8003f46:	81a3      	strhne	r3, [r4, #12]
 8003f48:	bd10      	pop	{r4, pc}

08003f4a <__sclose>:
 8003f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f4e:	f000 b89d 	b.w	800408c <_close_r>

08003f52 <__swbuf_r>:
 8003f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f54:	460e      	mov	r6, r1
 8003f56:	4614      	mov	r4, r2
 8003f58:	4605      	mov	r5, r0
 8003f5a:	b118      	cbz	r0, 8003f64 <__swbuf_r+0x12>
 8003f5c:	6a03      	ldr	r3, [r0, #32]
 8003f5e:	b90b      	cbnz	r3, 8003f64 <__swbuf_r+0x12>
 8003f60:	f7ff ff0e 	bl	8003d80 <__sinit>
 8003f64:	69a3      	ldr	r3, [r4, #24]
 8003f66:	60a3      	str	r3, [r4, #8]
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	071a      	lsls	r2, r3, #28
 8003f6c:	d501      	bpl.n	8003f72 <__swbuf_r+0x20>
 8003f6e:	6923      	ldr	r3, [r4, #16]
 8003f70:	b943      	cbnz	r3, 8003f84 <__swbuf_r+0x32>
 8003f72:	4621      	mov	r1, r4
 8003f74:	4628      	mov	r0, r5
 8003f76:	f000 f82b 	bl	8003fd0 <__swsetup_r>
 8003f7a:	b118      	cbz	r0, 8003f84 <__swbuf_r+0x32>
 8003f7c:	f04f 37ff 	mov.w	r7, #4294967295
 8003f80:	4638      	mov	r0, r7
 8003f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	6922      	ldr	r2, [r4, #16]
 8003f88:	1a98      	subs	r0, r3, r2
 8003f8a:	6963      	ldr	r3, [r4, #20]
 8003f8c:	b2f6      	uxtb	r6, r6
 8003f8e:	4283      	cmp	r3, r0
 8003f90:	4637      	mov	r7, r6
 8003f92:	dc05      	bgt.n	8003fa0 <__swbuf_r+0x4e>
 8003f94:	4621      	mov	r1, r4
 8003f96:	4628      	mov	r0, r5
 8003f98:	f000 fd38 	bl	8004a0c <_fflush_r>
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	d1ed      	bne.n	8003f7c <__swbuf_r+0x2a>
 8003fa0:	68a3      	ldr	r3, [r4, #8]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	60a3      	str	r3, [r4, #8]
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	6022      	str	r2, [r4, #0]
 8003fac:	701e      	strb	r6, [r3, #0]
 8003fae:	6962      	ldr	r2, [r4, #20]
 8003fb0:	1c43      	adds	r3, r0, #1
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d004      	beq.n	8003fc0 <__swbuf_r+0x6e>
 8003fb6:	89a3      	ldrh	r3, [r4, #12]
 8003fb8:	07db      	lsls	r3, r3, #31
 8003fba:	d5e1      	bpl.n	8003f80 <__swbuf_r+0x2e>
 8003fbc:	2e0a      	cmp	r6, #10
 8003fbe:	d1df      	bne.n	8003f80 <__swbuf_r+0x2e>
 8003fc0:	4621      	mov	r1, r4
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	f000 fd22 	bl	8004a0c <_fflush_r>
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	d0d9      	beq.n	8003f80 <__swbuf_r+0x2e>
 8003fcc:	e7d6      	b.n	8003f7c <__swbuf_r+0x2a>
	...

08003fd0 <__swsetup_r>:
 8003fd0:	b538      	push	{r3, r4, r5, lr}
 8003fd2:	4b29      	ldr	r3, [pc, #164]	@ (8004078 <__swsetup_r+0xa8>)
 8003fd4:	4605      	mov	r5, r0
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	460c      	mov	r4, r1
 8003fda:	b118      	cbz	r0, 8003fe4 <__swsetup_r+0x14>
 8003fdc:	6a03      	ldr	r3, [r0, #32]
 8003fde:	b90b      	cbnz	r3, 8003fe4 <__swsetup_r+0x14>
 8003fe0:	f7ff fece 	bl	8003d80 <__sinit>
 8003fe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fe8:	0719      	lsls	r1, r3, #28
 8003fea:	d422      	bmi.n	8004032 <__swsetup_r+0x62>
 8003fec:	06da      	lsls	r2, r3, #27
 8003fee:	d407      	bmi.n	8004000 <__swsetup_r+0x30>
 8003ff0:	2209      	movs	r2, #9
 8003ff2:	602a      	str	r2, [r5, #0]
 8003ff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ff8:	81a3      	strh	r3, [r4, #12]
 8003ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffe:	e033      	b.n	8004068 <__swsetup_r+0x98>
 8004000:	0758      	lsls	r0, r3, #29
 8004002:	d512      	bpl.n	800402a <__swsetup_r+0x5a>
 8004004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004006:	b141      	cbz	r1, 800401a <__swsetup_r+0x4a>
 8004008:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800400c:	4299      	cmp	r1, r3
 800400e:	d002      	beq.n	8004016 <__swsetup_r+0x46>
 8004010:	4628      	mov	r0, r5
 8004012:	f000 f8af 	bl	8004174 <_free_r>
 8004016:	2300      	movs	r3, #0
 8004018:	6363      	str	r3, [r4, #52]	@ 0x34
 800401a:	89a3      	ldrh	r3, [r4, #12]
 800401c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004020:	81a3      	strh	r3, [r4, #12]
 8004022:	2300      	movs	r3, #0
 8004024:	6063      	str	r3, [r4, #4]
 8004026:	6923      	ldr	r3, [r4, #16]
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	89a3      	ldrh	r3, [r4, #12]
 800402c:	f043 0308 	orr.w	r3, r3, #8
 8004030:	81a3      	strh	r3, [r4, #12]
 8004032:	6923      	ldr	r3, [r4, #16]
 8004034:	b94b      	cbnz	r3, 800404a <__swsetup_r+0x7a>
 8004036:	89a3      	ldrh	r3, [r4, #12]
 8004038:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800403c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004040:	d003      	beq.n	800404a <__swsetup_r+0x7a>
 8004042:	4621      	mov	r1, r4
 8004044:	4628      	mov	r0, r5
 8004046:	f000 fd2f 	bl	8004aa8 <__smakebuf_r>
 800404a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800404e:	f013 0201 	ands.w	r2, r3, #1
 8004052:	d00a      	beq.n	800406a <__swsetup_r+0x9a>
 8004054:	2200      	movs	r2, #0
 8004056:	60a2      	str	r2, [r4, #8]
 8004058:	6962      	ldr	r2, [r4, #20]
 800405a:	4252      	negs	r2, r2
 800405c:	61a2      	str	r2, [r4, #24]
 800405e:	6922      	ldr	r2, [r4, #16]
 8004060:	b942      	cbnz	r2, 8004074 <__swsetup_r+0xa4>
 8004062:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004066:	d1c5      	bne.n	8003ff4 <__swsetup_r+0x24>
 8004068:	bd38      	pop	{r3, r4, r5, pc}
 800406a:	0799      	lsls	r1, r3, #30
 800406c:	bf58      	it	pl
 800406e:	6962      	ldrpl	r2, [r4, #20]
 8004070:	60a2      	str	r2, [r4, #8]
 8004072:	e7f4      	b.n	800405e <__swsetup_r+0x8e>
 8004074:	2000      	movs	r0, #0
 8004076:	e7f7      	b.n	8004068 <__swsetup_r+0x98>
 8004078:	20000018 	.word	0x20000018

0800407c <memset>:
 800407c:	4402      	add	r2, r0
 800407e:	4603      	mov	r3, r0
 8004080:	4293      	cmp	r3, r2
 8004082:	d100      	bne.n	8004086 <memset+0xa>
 8004084:	4770      	bx	lr
 8004086:	f803 1b01 	strb.w	r1, [r3], #1
 800408a:	e7f9      	b.n	8004080 <memset+0x4>

0800408c <_close_r>:
 800408c:	b538      	push	{r3, r4, r5, lr}
 800408e:	4d06      	ldr	r5, [pc, #24]	@ (80040a8 <_close_r+0x1c>)
 8004090:	2300      	movs	r3, #0
 8004092:	4604      	mov	r4, r0
 8004094:	4608      	mov	r0, r1
 8004096:	602b      	str	r3, [r5, #0]
 8004098:	f7fc fe3f 	bl	8000d1a <_close>
 800409c:	1c43      	adds	r3, r0, #1
 800409e:	d102      	bne.n	80040a6 <_close_r+0x1a>
 80040a0:	682b      	ldr	r3, [r5, #0]
 80040a2:	b103      	cbz	r3, 80040a6 <_close_r+0x1a>
 80040a4:	6023      	str	r3, [r4, #0]
 80040a6:	bd38      	pop	{r3, r4, r5, pc}
 80040a8:	200002c0 	.word	0x200002c0

080040ac <_lseek_r>:
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	4d07      	ldr	r5, [pc, #28]	@ (80040cc <_lseek_r+0x20>)
 80040b0:	4604      	mov	r4, r0
 80040b2:	4608      	mov	r0, r1
 80040b4:	4611      	mov	r1, r2
 80040b6:	2200      	movs	r2, #0
 80040b8:	602a      	str	r2, [r5, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	f7fc fe54 	bl	8000d68 <_lseek>
 80040c0:	1c43      	adds	r3, r0, #1
 80040c2:	d102      	bne.n	80040ca <_lseek_r+0x1e>
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	b103      	cbz	r3, 80040ca <_lseek_r+0x1e>
 80040c8:	6023      	str	r3, [r4, #0]
 80040ca:	bd38      	pop	{r3, r4, r5, pc}
 80040cc:	200002c0 	.word	0x200002c0

080040d0 <_read_r>:
 80040d0:	b538      	push	{r3, r4, r5, lr}
 80040d2:	4d07      	ldr	r5, [pc, #28]	@ (80040f0 <_read_r+0x20>)
 80040d4:	4604      	mov	r4, r0
 80040d6:	4608      	mov	r0, r1
 80040d8:	4611      	mov	r1, r2
 80040da:	2200      	movs	r2, #0
 80040dc:	602a      	str	r2, [r5, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	f7fc fde2 	bl	8000ca8 <_read>
 80040e4:	1c43      	adds	r3, r0, #1
 80040e6:	d102      	bne.n	80040ee <_read_r+0x1e>
 80040e8:	682b      	ldr	r3, [r5, #0]
 80040ea:	b103      	cbz	r3, 80040ee <_read_r+0x1e>
 80040ec:	6023      	str	r3, [r4, #0]
 80040ee:	bd38      	pop	{r3, r4, r5, pc}
 80040f0:	200002c0 	.word	0x200002c0

080040f4 <_write_r>:
 80040f4:	b538      	push	{r3, r4, r5, lr}
 80040f6:	4d07      	ldr	r5, [pc, #28]	@ (8004114 <_write_r+0x20>)
 80040f8:	4604      	mov	r4, r0
 80040fa:	4608      	mov	r0, r1
 80040fc:	4611      	mov	r1, r2
 80040fe:	2200      	movs	r2, #0
 8004100:	602a      	str	r2, [r5, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	f7fc fded 	bl	8000ce2 <_write>
 8004108:	1c43      	adds	r3, r0, #1
 800410a:	d102      	bne.n	8004112 <_write_r+0x1e>
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	b103      	cbz	r3, 8004112 <_write_r+0x1e>
 8004110:	6023      	str	r3, [r4, #0]
 8004112:	bd38      	pop	{r3, r4, r5, pc}
 8004114:	200002c0 	.word	0x200002c0

08004118 <__errno>:
 8004118:	4b01      	ldr	r3, [pc, #4]	@ (8004120 <__errno+0x8>)
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20000018 	.word	0x20000018

08004124 <__libc_init_array>:
 8004124:	b570      	push	{r4, r5, r6, lr}
 8004126:	4d0d      	ldr	r5, [pc, #52]	@ (800415c <__libc_init_array+0x38>)
 8004128:	4c0d      	ldr	r4, [pc, #52]	@ (8004160 <__libc_init_array+0x3c>)
 800412a:	1b64      	subs	r4, r4, r5
 800412c:	10a4      	asrs	r4, r4, #2
 800412e:	2600      	movs	r6, #0
 8004130:	42a6      	cmp	r6, r4
 8004132:	d109      	bne.n	8004148 <__libc_init_array+0x24>
 8004134:	4d0b      	ldr	r5, [pc, #44]	@ (8004164 <__libc_init_array+0x40>)
 8004136:	4c0c      	ldr	r4, [pc, #48]	@ (8004168 <__libc_init_array+0x44>)
 8004138:	f000 fd24 	bl	8004b84 <_init>
 800413c:	1b64      	subs	r4, r4, r5
 800413e:	10a4      	asrs	r4, r4, #2
 8004140:	2600      	movs	r6, #0
 8004142:	42a6      	cmp	r6, r4
 8004144:	d105      	bne.n	8004152 <__libc_init_array+0x2e>
 8004146:	bd70      	pop	{r4, r5, r6, pc}
 8004148:	f855 3b04 	ldr.w	r3, [r5], #4
 800414c:	4798      	blx	r3
 800414e:	3601      	adds	r6, #1
 8004150:	e7ee      	b.n	8004130 <__libc_init_array+0xc>
 8004152:	f855 3b04 	ldr.w	r3, [r5], #4
 8004156:	4798      	blx	r3
 8004158:	3601      	adds	r6, #1
 800415a:	e7f2      	b.n	8004142 <__libc_init_array+0x1e>
 800415c:	08004c80 	.word	0x08004c80
 8004160:	08004c80 	.word	0x08004c80
 8004164:	08004c80 	.word	0x08004c80
 8004168:	08004c84 	.word	0x08004c84

0800416c <__retarget_lock_init_recursive>:
 800416c:	4770      	bx	lr

0800416e <__retarget_lock_acquire_recursive>:
 800416e:	4770      	bx	lr

08004170 <__retarget_lock_release_recursive>:
 8004170:	4770      	bx	lr
	...

08004174 <_free_r>:
 8004174:	b538      	push	{r3, r4, r5, lr}
 8004176:	4605      	mov	r5, r0
 8004178:	2900      	cmp	r1, #0
 800417a:	d041      	beq.n	8004200 <_free_r+0x8c>
 800417c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004180:	1f0c      	subs	r4, r1, #4
 8004182:	2b00      	cmp	r3, #0
 8004184:	bfb8      	it	lt
 8004186:	18e4      	addlt	r4, r4, r3
 8004188:	f000 f8e0 	bl	800434c <__malloc_lock>
 800418c:	4a1d      	ldr	r2, [pc, #116]	@ (8004204 <_free_r+0x90>)
 800418e:	6813      	ldr	r3, [r2, #0]
 8004190:	b933      	cbnz	r3, 80041a0 <_free_r+0x2c>
 8004192:	6063      	str	r3, [r4, #4]
 8004194:	6014      	str	r4, [r2, #0]
 8004196:	4628      	mov	r0, r5
 8004198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800419c:	f000 b8dc 	b.w	8004358 <__malloc_unlock>
 80041a0:	42a3      	cmp	r3, r4
 80041a2:	d908      	bls.n	80041b6 <_free_r+0x42>
 80041a4:	6820      	ldr	r0, [r4, #0]
 80041a6:	1821      	adds	r1, r4, r0
 80041a8:	428b      	cmp	r3, r1
 80041aa:	bf01      	itttt	eq
 80041ac:	6819      	ldreq	r1, [r3, #0]
 80041ae:	685b      	ldreq	r3, [r3, #4]
 80041b0:	1809      	addeq	r1, r1, r0
 80041b2:	6021      	streq	r1, [r4, #0]
 80041b4:	e7ed      	b.n	8004192 <_free_r+0x1e>
 80041b6:	461a      	mov	r2, r3
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	b10b      	cbz	r3, 80041c0 <_free_r+0x4c>
 80041bc:	42a3      	cmp	r3, r4
 80041be:	d9fa      	bls.n	80041b6 <_free_r+0x42>
 80041c0:	6811      	ldr	r1, [r2, #0]
 80041c2:	1850      	adds	r0, r2, r1
 80041c4:	42a0      	cmp	r0, r4
 80041c6:	d10b      	bne.n	80041e0 <_free_r+0x6c>
 80041c8:	6820      	ldr	r0, [r4, #0]
 80041ca:	4401      	add	r1, r0
 80041cc:	1850      	adds	r0, r2, r1
 80041ce:	4283      	cmp	r3, r0
 80041d0:	6011      	str	r1, [r2, #0]
 80041d2:	d1e0      	bne.n	8004196 <_free_r+0x22>
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	6053      	str	r3, [r2, #4]
 80041da:	4408      	add	r0, r1
 80041dc:	6010      	str	r0, [r2, #0]
 80041de:	e7da      	b.n	8004196 <_free_r+0x22>
 80041e0:	d902      	bls.n	80041e8 <_free_r+0x74>
 80041e2:	230c      	movs	r3, #12
 80041e4:	602b      	str	r3, [r5, #0]
 80041e6:	e7d6      	b.n	8004196 <_free_r+0x22>
 80041e8:	6820      	ldr	r0, [r4, #0]
 80041ea:	1821      	adds	r1, r4, r0
 80041ec:	428b      	cmp	r3, r1
 80041ee:	bf04      	itt	eq
 80041f0:	6819      	ldreq	r1, [r3, #0]
 80041f2:	685b      	ldreq	r3, [r3, #4]
 80041f4:	6063      	str	r3, [r4, #4]
 80041f6:	bf04      	itt	eq
 80041f8:	1809      	addeq	r1, r1, r0
 80041fa:	6021      	streq	r1, [r4, #0]
 80041fc:	6054      	str	r4, [r2, #4]
 80041fe:	e7ca      	b.n	8004196 <_free_r+0x22>
 8004200:	bd38      	pop	{r3, r4, r5, pc}
 8004202:	bf00      	nop
 8004204:	200002cc 	.word	0x200002cc

08004208 <sbrk_aligned>:
 8004208:	b570      	push	{r4, r5, r6, lr}
 800420a:	4e0f      	ldr	r6, [pc, #60]	@ (8004248 <sbrk_aligned+0x40>)
 800420c:	460c      	mov	r4, r1
 800420e:	6831      	ldr	r1, [r6, #0]
 8004210:	4605      	mov	r5, r0
 8004212:	b911      	cbnz	r1, 800421a <sbrk_aligned+0x12>
 8004214:	f000 fca6 	bl	8004b64 <_sbrk_r>
 8004218:	6030      	str	r0, [r6, #0]
 800421a:	4621      	mov	r1, r4
 800421c:	4628      	mov	r0, r5
 800421e:	f000 fca1 	bl	8004b64 <_sbrk_r>
 8004222:	1c43      	adds	r3, r0, #1
 8004224:	d103      	bne.n	800422e <sbrk_aligned+0x26>
 8004226:	f04f 34ff 	mov.w	r4, #4294967295
 800422a:	4620      	mov	r0, r4
 800422c:	bd70      	pop	{r4, r5, r6, pc}
 800422e:	1cc4      	adds	r4, r0, #3
 8004230:	f024 0403 	bic.w	r4, r4, #3
 8004234:	42a0      	cmp	r0, r4
 8004236:	d0f8      	beq.n	800422a <sbrk_aligned+0x22>
 8004238:	1a21      	subs	r1, r4, r0
 800423a:	4628      	mov	r0, r5
 800423c:	f000 fc92 	bl	8004b64 <_sbrk_r>
 8004240:	3001      	adds	r0, #1
 8004242:	d1f2      	bne.n	800422a <sbrk_aligned+0x22>
 8004244:	e7ef      	b.n	8004226 <sbrk_aligned+0x1e>
 8004246:	bf00      	nop
 8004248:	200002c8 	.word	0x200002c8

0800424c <_malloc_r>:
 800424c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004250:	1ccd      	adds	r5, r1, #3
 8004252:	f025 0503 	bic.w	r5, r5, #3
 8004256:	3508      	adds	r5, #8
 8004258:	2d0c      	cmp	r5, #12
 800425a:	bf38      	it	cc
 800425c:	250c      	movcc	r5, #12
 800425e:	2d00      	cmp	r5, #0
 8004260:	4606      	mov	r6, r0
 8004262:	db01      	blt.n	8004268 <_malloc_r+0x1c>
 8004264:	42a9      	cmp	r1, r5
 8004266:	d904      	bls.n	8004272 <_malloc_r+0x26>
 8004268:	230c      	movs	r3, #12
 800426a:	6033      	str	r3, [r6, #0]
 800426c:	2000      	movs	r0, #0
 800426e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004272:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004348 <_malloc_r+0xfc>
 8004276:	f000 f869 	bl	800434c <__malloc_lock>
 800427a:	f8d8 3000 	ldr.w	r3, [r8]
 800427e:	461c      	mov	r4, r3
 8004280:	bb44      	cbnz	r4, 80042d4 <_malloc_r+0x88>
 8004282:	4629      	mov	r1, r5
 8004284:	4630      	mov	r0, r6
 8004286:	f7ff ffbf 	bl	8004208 <sbrk_aligned>
 800428a:	1c43      	adds	r3, r0, #1
 800428c:	4604      	mov	r4, r0
 800428e:	d158      	bne.n	8004342 <_malloc_r+0xf6>
 8004290:	f8d8 4000 	ldr.w	r4, [r8]
 8004294:	4627      	mov	r7, r4
 8004296:	2f00      	cmp	r7, #0
 8004298:	d143      	bne.n	8004322 <_malloc_r+0xd6>
 800429a:	2c00      	cmp	r4, #0
 800429c:	d04b      	beq.n	8004336 <_malloc_r+0xea>
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	4639      	mov	r1, r7
 80042a2:	4630      	mov	r0, r6
 80042a4:	eb04 0903 	add.w	r9, r4, r3
 80042a8:	f000 fc5c 	bl	8004b64 <_sbrk_r>
 80042ac:	4581      	cmp	r9, r0
 80042ae:	d142      	bne.n	8004336 <_malloc_r+0xea>
 80042b0:	6821      	ldr	r1, [r4, #0]
 80042b2:	1a6d      	subs	r5, r5, r1
 80042b4:	4629      	mov	r1, r5
 80042b6:	4630      	mov	r0, r6
 80042b8:	f7ff ffa6 	bl	8004208 <sbrk_aligned>
 80042bc:	3001      	adds	r0, #1
 80042be:	d03a      	beq.n	8004336 <_malloc_r+0xea>
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	442b      	add	r3, r5
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	f8d8 3000 	ldr.w	r3, [r8]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	bb62      	cbnz	r2, 8004328 <_malloc_r+0xdc>
 80042ce:	f8c8 7000 	str.w	r7, [r8]
 80042d2:	e00f      	b.n	80042f4 <_malloc_r+0xa8>
 80042d4:	6822      	ldr	r2, [r4, #0]
 80042d6:	1b52      	subs	r2, r2, r5
 80042d8:	d420      	bmi.n	800431c <_malloc_r+0xd0>
 80042da:	2a0b      	cmp	r2, #11
 80042dc:	d917      	bls.n	800430e <_malloc_r+0xc2>
 80042de:	1961      	adds	r1, r4, r5
 80042e0:	42a3      	cmp	r3, r4
 80042e2:	6025      	str	r5, [r4, #0]
 80042e4:	bf18      	it	ne
 80042e6:	6059      	strne	r1, [r3, #4]
 80042e8:	6863      	ldr	r3, [r4, #4]
 80042ea:	bf08      	it	eq
 80042ec:	f8c8 1000 	streq.w	r1, [r8]
 80042f0:	5162      	str	r2, [r4, r5]
 80042f2:	604b      	str	r3, [r1, #4]
 80042f4:	4630      	mov	r0, r6
 80042f6:	f000 f82f 	bl	8004358 <__malloc_unlock>
 80042fa:	f104 000b 	add.w	r0, r4, #11
 80042fe:	1d23      	adds	r3, r4, #4
 8004300:	f020 0007 	bic.w	r0, r0, #7
 8004304:	1ac2      	subs	r2, r0, r3
 8004306:	bf1c      	itt	ne
 8004308:	1a1b      	subne	r3, r3, r0
 800430a:	50a3      	strne	r3, [r4, r2]
 800430c:	e7af      	b.n	800426e <_malloc_r+0x22>
 800430e:	6862      	ldr	r2, [r4, #4]
 8004310:	42a3      	cmp	r3, r4
 8004312:	bf0c      	ite	eq
 8004314:	f8c8 2000 	streq.w	r2, [r8]
 8004318:	605a      	strne	r2, [r3, #4]
 800431a:	e7eb      	b.n	80042f4 <_malloc_r+0xa8>
 800431c:	4623      	mov	r3, r4
 800431e:	6864      	ldr	r4, [r4, #4]
 8004320:	e7ae      	b.n	8004280 <_malloc_r+0x34>
 8004322:	463c      	mov	r4, r7
 8004324:	687f      	ldr	r7, [r7, #4]
 8004326:	e7b6      	b.n	8004296 <_malloc_r+0x4a>
 8004328:	461a      	mov	r2, r3
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	42a3      	cmp	r3, r4
 800432e:	d1fb      	bne.n	8004328 <_malloc_r+0xdc>
 8004330:	2300      	movs	r3, #0
 8004332:	6053      	str	r3, [r2, #4]
 8004334:	e7de      	b.n	80042f4 <_malloc_r+0xa8>
 8004336:	230c      	movs	r3, #12
 8004338:	6033      	str	r3, [r6, #0]
 800433a:	4630      	mov	r0, r6
 800433c:	f000 f80c 	bl	8004358 <__malloc_unlock>
 8004340:	e794      	b.n	800426c <_malloc_r+0x20>
 8004342:	6005      	str	r5, [r0, #0]
 8004344:	e7d6      	b.n	80042f4 <_malloc_r+0xa8>
 8004346:	bf00      	nop
 8004348:	200002cc 	.word	0x200002cc

0800434c <__malloc_lock>:
 800434c:	4801      	ldr	r0, [pc, #4]	@ (8004354 <__malloc_lock+0x8>)
 800434e:	f7ff bf0e 	b.w	800416e <__retarget_lock_acquire_recursive>
 8004352:	bf00      	nop
 8004354:	200002c4 	.word	0x200002c4

08004358 <__malloc_unlock>:
 8004358:	4801      	ldr	r0, [pc, #4]	@ (8004360 <__malloc_unlock+0x8>)
 800435a:	f7ff bf09 	b.w	8004170 <__retarget_lock_release_recursive>
 800435e:	bf00      	nop
 8004360:	200002c4 	.word	0x200002c4

08004364 <__sfputc_r>:
 8004364:	6893      	ldr	r3, [r2, #8]
 8004366:	3b01      	subs	r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	b410      	push	{r4}
 800436c:	6093      	str	r3, [r2, #8]
 800436e:	da08      	bge.n	8004382 <__sfputc_r+0x1e>
 8004370:	6994      	ldr	r4, [r2, #24]
 8004372:	42a3      	cmp	r3, r4
 8004374:	db01      	blt.n	800437a <__sfputc_r+0x16>
 8004376:	290a      	cmp	r1, #10
 8004378:	d103      	bne.n	8004382 <__sfputc_r+0x1e>
 800437a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800437e:	f7ff bde8 	b.w	8003f52 <__swbuf_r>
 8004382:	6813      	ldr	r3, [r2, #0]
 8004384:	1c58      	adds	r0, r3, #1
 8004386:	6010      	str	r0, [r2, #0]
 8004388:	7019      	strb	r1, [r3, #0]
 800438a:	4608      	mov	r0, r1
 800438c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004390:	4770      	bx	lr

08004392 <__sfputs_r>:
 8004392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004394:	4606      	mov	r6, r0
 8004396:	460f      	mov	r7, r1
 8004398:	4614      	mov	r4, r2
 800439a:	18d5      	adds	r5, r2, r3
 800439c:	42ac      	cmp	r4, r5
 800439e:	d101      	bne.n	80043a4 <__sfputs_r+0x12>
 80043a0:	2000      	movs	r0, #0
 80043a2:	e007      	b.n	80043b4 <__sfputs_r+0x22>
 80043a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043a8:	463a      	mov	r2, r7
 80043aa:	4630      	mov	r0, r6
 80043ac:	f7ff ffda 	bl	8004364 <__sfputc_r>
 80043b0:	1c43      	adds	r3, r0, #1
 80043b2:	d1f3      	bne.n	800439c <__sfputs_r+0xa>
 80043b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043b8 <_vfiprintf_r>:
 80043b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043bc:	460d      	mov	r5, r1
 80043be:	b09d      	sub	sp, #116	@ 0x74
 80043c0:	4614      	mov	r4, r2
 80043c2:	4698      	mov	r8, r3
 80043c4:	4606      	mov	r6, r0
 80043c6:	b118      	cbz	r0, 80043d0 <_vfiprintf_r+0x18>
 80043c8:	6a03      	ldr	r3, [r0, #32]
 80043ca:	b90b      	cbnz	r3, 80043d0 <_vfiprintf_r+0x18>
 80043cc:	f7ff fcd8 	bl	8003d80 <__sinit>
 80043d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043d2:	07d9      	lsls	r1, r3, #31
 80043d4:	d405      	bmi.n	80043e2 <_vfiprintf_r+0x2a>
 80043d6:	89ab      	ldrh	r3, [r5, #12]
 80043d8:	059a      	lsls	r2, r3, #22
 80043da:	d402      	bmi.n	80043e2 <_vfiprintf_r+0x2a>
 80043dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043de:	f7ff fec6 	bl	800416e <__retarget_lock_acquire_recursive>
 80043e2:	89ab      	ldrh	r3, [r5, #12]
 80043e4:	071b      	lsls	r3, r3, #28
 80043e6:	d501      	bpl.n	80043ec <_vfiprintf_r+0x34>
 80043e8:	692b      	ldr	r3, [r5, #16]
 80043ea:	b99b      	cbnz	r3, 8004414 <_vfiprintf_r+0x5c>
 80043ec:	4629      	mov	r1, r5
 80043ee:	4630      	mov	r0, r6
 80043f0:	f7ff fdee 	bl	8003fd0 <__swsetup_r>
 80043f4:	b170      	cbz	r0, 8004414 <_vfiprintf_r+0x5c>
 80043f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043f8:	07dc      	lsls	r4, r3, #31
 80043fa:	d504      	bpl.n	8004406 <_vfiprintf_r+0x4e>
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004400:	b01d      	add	sp, #116	@ 0x74
 8004402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004406:	89ab      	ldrh	r3, [r5, #12]
 8004408:	0598      	lsls	r0, r3, #22
 800440a:	d4f7      	bmi.n	80043fc <_vfiprintf_r+0x44>
 800440c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800440e:	f7ff feaf 	bl	8004170 <__retarget_lock_release_recursive>
 8004412:	e7f3      	b.n	80043fc <_vfiprintf_r+0x44>
 8004414:	2300      	movs	r3, #0
 8004416:	9309      	str	r3, [sp, #36]	@ 0x24
 8004418:	2320      	movs	r3, #32
 800441a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800441e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004422:	2330      	movs	r3, #48	@ 0x30
 8004424:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80045d4 <_vfiprintf_r+0x21c>
 8004428:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800442c:	f04f 0901 	mov.w	r9, #1
 8004430:	4623      	mov	r3, r4
 8004432:	469a      	mov	sl, r3
 8004434:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004438:	b10a      	cbz	r2, 800443e <_vfiprintf_r+0x86>
 800443a:	2a25      	cmp	r2, #37	@ 0x25
 800443c:	d1f9      	bne.n	8004432 <_vfiprintf_r+0x7a>
 800443e:	ebba 0b04 	subs.w	fp, sl, r4
 8004442:	d00b      	beq.n	800445c <_vfiprintf_r+0xa4>
 8004444:	465b      	mov	r3, fp
 8004446:	4622      	mov	r2, r4
 8004448:	4629      	mov	r1, r5
 800444a:	4630      	mov	r0, r6
 800444c:	f7ff ffa1 	bl	8004392 <__sfputs_r>
 8004450:	3001      	adds	r0, #1
 8004452:	f000 80a7 	beq.w	80045a4 <_vfiprintf_r+0x1ec>
 8004456:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004458:	445a      	add	r2, fp
 800445a:	9209      	str	r2, [sp, #36]	@ 0x24
 800445c:	f89a 3000 	ldrb.w	r3, [sl]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 809f 	beq.w	80045a4 <_vfiprintf_r+0x1ec>
 8004466:	2300      	movs	r3, #0
 8004468:	f04f 32ff 	mov.w	r2, #4294967295
 800446c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004470:	f10a 0a01 	add.w	sl, sl, #1
 8004474:	9304      	str	r3, [sp, #16]
 8004476:	9307      	str	r3, [sp, #28]
 8004478:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800447c:	931a      	str	r3, [sp, #104]	@ 0x68
 800447e:	4654      	mov	r4, sl
 8004480:	2205      	movs	r2, #5
 8004482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004486:	4853      	ldr	r0, [pc, #332]	@ (80045d4 <_vfiprintf_r+0x21c>)
 8004488:	f7fb feaa 	bl	80001e0 <memchr>
 800448c:	9a04      	ldr	r2, [sp, #16]
 800448e:	b9d8      	cbnz	r0, 80044c8 <_vfiprintf_r+0x110>
 8004490:	06d1      	lsls	r1, r2, #27
 8004492:	bf44      	itt	mi
 8004494:	2320      	movmi	r3, #32
 8004496:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800449a:	0713      	lsls	r3, r2, #28
 800449c:	bf44      	itt	mi
 800449e:	232b      	movmi	r3, #43	@ 0x2b
 80044a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044a4:	f89a 3000 	ldrb.w	r3, [sl]
 80044a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80044aa:	d015      	beq.n	80044d8 <_vfiprintf_r+0x120>
 80044ac:	9a07      	ldr	r2, [sp, #28]
 80044ae:	4654      	mov	r4, sl
 80044b0:	2000      	movs	r0, #0
 80044b2:	f04f 0c0a 	mov.w	ip, #10
 80044b6:	4621      	mov	r1, r4
 80044b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044bc:	3b30      	subs	r3, #48	@ 0x30
 80044be:	2b09      	cmp	r3, #9
 80044c0:	d94b      	bls.n	800455a <_vfiprintf_r+0x1a2>
 80044c2:	b1b0      	cbz	r0, 80044f2 <_vfiprintf_r+0x13a>
 80044c4:	9207      	str	r2, [sp, #28]
 80044c6:	e014      	b.n	80044f2 <_vfiprintf_r+0x13a>
 80044c8:	eba0 0308 	sub.w	r3, r0, r8
 80044cc:	fa09 f303 	lsl.w	r3, r9, r3
 80044d0:	4313      	orrs	r3, r2
 80044d2:	9304      	str	r3, [sp, #16]
 80044d4:	46a2      	mov	sl, r4
 80044d6:	e7d2      	b.n	800447e <_vfiprintf_r+0xc6>
 80044d8:	9b03      	ldr	r3, [sp, #12]
 80044da:	1d19      	adds	r1, r3, #4
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	9103      	str	r1, [sp, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bfbb      	ittet	lt
 80044e4:	425b      	neglt	r3, r3
 80044e6:	f042 0202 	orrlt.w	r2, r2, #2
 80044ea:	9307      	strge	r3, [sp, #28]
 80044ec:	9307      	strlt	r3, [sp, #28]
 80044ee:	bfb8      	it	lt
 80044f0:	9204      	strlt	r2, [sp, #16]
 80044f2:	7823      	ldrb	r3, [r4, #0]
 80044f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80044f6:	d10a      	bne.n	800450e <_vfiprintf_r+0x156>
 80044f8:	7863      	ldrb	r3, [r4, #1]
 80044fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80044fc:	d132      	bne.n	8004564 <_vfiprintf_r+0x1ac>
 80044fe:	9b03      	ldr	r3, [sp, #12]
 8004500:	1d1a      	adds	r2, r3, #4
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	9203      	str	r2, [sp, #12]
 8004506:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800450a:	3402      	adds	r4, #2
 800450c:	9305      	str	r3, [sp, #20]
 800450e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80045e4 <_vfiprintf_r+0x22c>
 8004512:	7821      	ldrb	r1, [r4, #0]
 8004514:	2203      	movs	r2, #3
 8004516:	4650      	mov	r0, sl
 8004518:	f7fb fe62 	bl	80001e0 <memchr>
 800451c:	b138      	cbz	r0, 800452e <_vfiprintf_r+0x176>
 800451e:	9b04      	ldr	r3, [sp, #16]
 8004520:	eba0 000a 	sub.w	r0, r0, sl
 8004524:	2240      	movs	r2, #64	@ 0x40
 8004526:	4082      	lsls	r2, r0
 8004528:	4313      	orrs	r3, r2
 800452a:	3401      	adds	r4, #1
 800452c:	9304      	str	r3, [sp, #16]
 800452e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004532:	4829      	ldr	r0, [pc, #164]	@ (80045d8 <_vfiprintf_r+0x220>)
 8004534:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004538:	2206      	movs	r2, #6
 800453a:	f7fb fe51 	bl	80001e0 <memchr>
 800453e:	2800      	cmp	r0, #0
 8004540:	d03f      	beq.n	80045c2 <_vfiprintf_r+0x20a>
 8004542:	4b26      	ldr	r3, [pc, #152]	@ (80045dc <_vfiprintf_r+0x224>)
 8004544:	bb1b      	cbnz	r3, 800458e <_vfiprintf_r+0x1d6>
 8004546:	9b03      	ldr	r3, [sp, #12]
 8004548:	3307      	adds	r3, #7
 800454a:	f023 0307 	bic.w	r3, r3, #7
 800454e:	3308      	adds	r3, #8
 8004550:	9303      	str	r3, [sp, #12]
 8004552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004554:	443b      	add	r3, r7
 8004556:	9309      	str	r3, [sp, #36]	@ 0x24
 8004558:	e76a      	b.n	8004430 <_vfiprintf_r+0x78>
 800455a:	fb0c 3202 	mla	r2, ip, r2, r3
 800455e:	460c      	mov	r4, r1
 8004560:	2001      	movs	r0, #1
 8004562:	e7a8      	b.n	80044b6 <_vfiprintf_r+0xfe>
 8004564:	2300      	movs	r3, #0
 8004566:	3401      	adds	r4, #1
 8004568:	9305      	str	r3, [sp, #20]
 800456a:	4619      	mov	r1, r3
 800456c:	f04f 0c0a 	mov.w	ip, #10
 8004570:	4620      	mov	r0, r4
 8004572:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004576:	3a30      	subs	r2, #48	@ 0x30
 8004578:	2a09      	cmp	r2, #9
 800457a:	d903      	bls.n	8004584 <_vfiprintf_r+0x1cc>
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0c6      	beq.n	800450e <_vfiprintf_r+0x156>
 8004580:	9105      	str	r1, [sp, #20]
 8004582:	e7c4      	b.n	800450e <_vfiprintf_r+0x156>
 8004584:	fb0c 2101 	mla	r1, ip, r1, r2
 8004588:	4604      	mov	r4, r0
 800458a:	2301      	movs	r3, #1
 800458c:	e7f0      	b.n	8004570 <_vfiprintf_r+0x1b8>
 800458e:	ab03      	add	r3, sp, #12
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	462a      	mov	r2, r5
 8004594:	4b12      	ldr	r3, [pc, #72]	@ (80045e0 <_vfiprintf_r+0x228>)
 8004596:	a904      	add	r1, sp, #16
 8004598:	4630      	mov	r0, r6
 800459a:	f3af 8000 	nop.w
 800459e:	4607      	mov	r7, r0
 80045a0:	1c78      	adds	r0, r7, #1
 80045a2:	d1d6      	bne.n	8004552 <_vfiprintf_r+0x19a>
 80045a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045a6:	07d9      	lsls	r1, r3, #31
 80045a8:	d405      	bmi.n	80045b6 <_vfiprintf_r+0x1fe>
 80045aa:	89ab      	ldrh	r3, [r5, #12]
 80045ac:	059a      	lsls	r2, r3, #22
 80045ae:	d402      	bmi.n	80045b6 <_vfiprintf_r+0x1fe>
 80045b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045b2:	f7ff fddd 	bl	8004170 <__retarget_lock_release_recursive>
 80045b6:	89ab      	ldrh	r3, [r5, #12]
 80045b8:	065b      	lsls	r3, r3, #25
 80045ba:	f53f af1f 	bmi.w	80043fc <_vfiprintf_r+0x44>
 80045be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045c0:	e71e      	b.n	8004400 <_vfiprintf_r+0x48>
 80045c2:	ab03      	add	r3, sp, #12
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	462a      	mov	r2, r5
 80045c8:	4b05      	ldr	r3, [pc, #20]	@ (80045e0 <_vfiprintf_r+0x228>)
 80045ca:	a904      	add	r1, sp, #16
 80045cc:	4630      	mov	r0, r6
 80045ce:	f000 f879 	bl	80046c4 <_printf_i>
 80045d2:	e7e4      	b.n	800459e <_vfiprintf_r+0x1e6>
 80045d4:	08004c44 	.word	0x08004c44
 80045d8:	08004c4e 	.word	0x08004c4e
 80045dc:	00000000 	.word	0x00000000
 80045e0:	08004393 	.word	0x08004393
 80045e4:	08004c4a 	.word	0x08004c4a

080045e8 <_printf_common>:
 80045e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045ec:	4616      	mov	r6, r2
 80045ee:	4698      	mov	r8, r3
 80045f0:	688a      	ldr	r2, [r1, #8]
 80045f2:	690b      	ldr	r3, [r1, #16]
 80045f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045f8:	4293      	cmp	r3, r2
 80045fa:	bfb8      	it	lt
 80045fc:	4613      	movlt	r3, r2
 80045fe:	6033      	str	r3, [r6, #0]
 8004600:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004604:	4607      	mov	r7, r0
 8004606:	460c      	mov	r4, r1
 8004608:	b10a      	cbz	r2, 800460e <_printf_common+0x26>
 800460a:	3301      	adds	r3, #1
 800460c:	6033      	str	r3, [r6, #0]
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	0699      	lsls	r1, r3, #26
 8004612:	bf42      	ittt	mi
 8004614:	6833      	ldrmi	r3, [r6, #0]
 8004616:	3302      	addmi	r3, #2
 8004618:	6033      	strmi	r3, [r6, #0]
 800461a:	6825      	ldr	r5, [r4, #0]
 800461c:	f015 0506 	ands.w	r5, r5, #6
 8004620:	d106      	bne.n	8004630 <_printf_common+0x48>
 8004622:	f104 0a19 	add.w	sl, r4, #25
 8004626:	68e3      	ldr	r3, [r4, #12]
 8004628:	6832      	ldr	r2, [r6, #0]
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	42ab      	cmp	r3, r5
 800462e:	dc26      	bgt.n	800467e <_printf_common+0x96>
 8004630:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004634:	6822      	ldr	r2, [r4, #0]
 8004636:	3b00      	subs	r3, #0
 8004638:	bf18      	it	ne
 800463a:	2301      	movne	r3, #1
 800463c:	0692      	lsls	r2, r2, #26
 800463e:	d42b      	bmi.n	8004698 <_printf_common+0xb0>
 8004640:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004644:	4641      	mov	r1, r8
 8004646:	4638      	mov	r0, r7
 8004648:	47c8      	blx	r9
 800464a:	3001      	adds	r0, #1
 800464c:	d01e      	beq.n	800468c <_printf_common+0xa4>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	6922      	ldr	r2, [r4, #16]
 8004652:	f003 0306 	and.w	r3, r3, #6
 8004656:	2b04      	cmp	r3, #4
 8004658:	bf02      	ittt	eq
 800465a:	68e5      	ldreq	r5, [r4, #12]
 800465c:	6833      	ldreq	r3, [r6, #0]
 800465e:	1aed      	subeq	r5, r5, r3
 8004660:	68a3      	ldr	r3, [r4, #8]
 8004662:	bf0c      	ite	eq
 8004664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004668:	2500      	movne	r5, #0
 800466a:	4293      	cmp	r3, r2
 800466c:	bfc4      	itt	gt
 800466e:	1a9b      	subgt	r3, r3, r2
 8004670:	18ed      	addgt	r5, r5, r3
 8004672:	2600      	movs	r6, #0
 8004674:	341a      	adds	r4, #26
 8004676:	42b5      	cmp	r5, r6
 8004678:	d11a      	bne.n	80046b0 <_printf_common+0xc8>
 800467a:	2000      	movs	r0, #0
 800467c:	e008      	b.n	8004690 <_printf_common+0xa8>
 800467e:	2301      	movs	r3, #1
 8004680:	4652      	mov	r2, sl
 8004682:	4641      	mov	r1, r8
 8004684:	4638      	mov	r0, r7
 8004686:	47c8      	blx	r9
 8004688:	3001      	adds	r0, #1
 800468a:	d103      	bne.n	8004694 <_printf_common+0xac>
 800468c:	f04f 30ff 	mov.w	r0, #4294967295
 8004690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004694:	3501      	adds	r5, #1
 8004696:	e7c6      	b.n	8004626 <_printf_common+0x3e>
 8004698:	18e1      	adds	r1, r4, r3
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	2030      	movs	r0, #48	@ 0x30
 800469e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046a2:	4422      	add	r2, r4
 80046a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046ac:	3302      	adds	r3, #2
 80046ae:	e7c7      	b.n	8004640 <_printf_common+0x58>
 80046b0:	2301      	movs	r3, #1
 80046b2:	4622      	mov	r2, r4
 80046b4:	4641      	mov	r1, r8
 80046b6:	4638      	mov	r0, r7
 80046b8:	47c8      	blx	r9
 80046ba:	3001      	adds	r0, #1
 80046bc:	d0e6      	beq.n	800468c <_printf_common+0xa4>
 80046be:	3601      	adds	r6, #1
 80046c0:	e7d9      	b.n	8004676 <_printf_common+0x8e>
	...

080046c4 <_printf_i>:
 80046c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046c8:	7e0f      	ldrb	r7, [r1, #24]
 80046ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046cc:	2f78      	cmp	r7, #120	@ 0x78
 80046ce:	4691      	mov	r9, r2
 80046d0:	4680      	mov	r8, r0
 80046d2:	460c      	mov	r4, r1
 80046d4:	469a      	mov	sl, r3
 80046d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046da:	d807      	bhi.n	80046ec <_printf_i+0x28>
 80046dc:	2f62      	cmp	r7, #98	@ 0x62
 80046de:	d80a      	bhi.n	80046f6 <_printf_i+0x32>
 80046e0:	2f00      	cmp	r7, #0
 80046e2:	f000 80d2 	beq.w	800488a <_printf_i+0x1c6>
 80046e6:	2f58      	cmp	r7, #88	@ 0x58
 80046e8:	f000 80b9 	beq.w	800485e <_printf_i+0x19a>
 80046ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046f4:	e03a      	b.n	800476c <_printf_i+0xa8>
 80046f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046fa:	2b15      	cmp	r3, #21
 80046fc:	d8f6      	bhi.n	80046ec <_printf_i+0x28>
 80046fe:	a101      	add	r1, pc, #4	@ (adr r1, 8004704 <_printf_i+0x40>)
 8004700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004704:	0800475d 	.word	0x0800475d
 8004708:	08004771 	.word	0x08004771
 800470c:	080046ed 	.word	0x080046ed
 8004710:	080046ed 	.word	0x080046ed
 8004714:	080046ed 	.word	0x080046ed
 8004718:	080046ed 	.word	0x080046ed
 800471c:	08004771 	.word	0x08004771
 8004720:	080046ed 	.word	0x080046ed
 8004724:	080046ed 	.word	0x080046ed
 8004728:	080046ed 	.word	0x080046ed
 800472c:	080046ed 	.word	0x080046ed
 8004730:	08004871 	.word	0x08004871
 8004734:	0800479b 	.word	0x0800479b
 8004738:	0800482b 	.word	0x0800482b
 800473c:	080046ed 	.word	0x080046ed
 8004740:	080046ed 	.word	0x080046ed
 8004744:	08004893 	.word	0x08004893
 8004748:	080046ed 	.word	0x080046ed
 800474c:	0800479b 	.word	0x0800479b
 8004750:	080046ed 	.word	0x080046ed
 8004754:	080046ed 	.word	0x080046ed
 8004758:	08004833 	.word	0x08004833
 800475c:	6833      	ldr	r3, [r6, #0]
 800475e:	1d1a      	adds	r2, r3, #4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6032      	str	r2, [r6, #0]
 8004764:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004768:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800476c:	2301      	movs	r3, #1
 800476e:	e09d      	b.n	80048ac <_printf_i+0x1e8>
 8004770:	6833      	ldr	r3, [r6, #0]
 8004772:	6820      	ldr	r0, [r4, #0]
 8004774:	1d19      	adds	r1, r3, #4
 8004776:	6031      	str	r1, [r6, #0]
 8004778:	0606      	lsls	r6, r0, #24
 800477a:	d501      	bpl.n	8004780 <_printf_i+0xbc>
 800477c:	681d      	ldr	r5, [r3, #0]
 800477e:	e003      	b.n	8004788 <_printf_i+0xc4>
 8004780:	0645      	lsls	r5, r0, #25
 8004782:	d5fb      	bpl.n	800477c <_printf_i+0xb8>
 8004784:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004788:	2d00      	cmp	r5, #0
 800478a:	da03      	bge.n	8004794 <_printf_i+0xd0>
 800478c:	232d      	movs	r3, #45	@ 0x2d
 800478e:	426d      	negs	r5, r5
 8004790:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004794:	4859      	ldr	r0, [pc, #356]	@ (80048fc <_printf_i+0x238>)
 8004796:	230a      	movs	r3, #10
 8004798:	e011      	b.n	80047be <_printf_i+0xfa>
 800479a:	6821      	ldr	r1, [r4, #0]
 800479c:	6833      	ldr	r3, [r6, #0]
 800479e:	0608      	lsls	r0, r1, #24
 80047a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80047a4:	d402      	bmi.n	80047ac <_printf_i+0xe8>
 80047a6:	0649      	lsls	r1, r1, #25
 80047a8:	bf48      	it	mi
 80047aa:	b2ad      	uxthmi	r5, r5
 80047ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80047ae:	4853      	ldr	r0, [pc, #332]	@ (80048fc <_printf_i+0x238>)
 80047b0:	6033      	str	r3, [r6, #0]
 80047b2:	bf14      	ite	ne
 80047b4:	230a      	movne	r3, #10
 80047b6:	2308      	moveq	r3, #8
 80047b8:	2100      	movs	r1, #0
 80047ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047be:	6866      	ldr	r6, [r4, #4]
 80047c0:	60a6      	str	r6, [r4, #8]
 80047c2:	2e00      	cmp	r6, #0
 80047c4:	bfa2      	ittt	ge
 80047c6:	6821      	ldrge	r1, [r4, #0]
 80047c8:	f021 0104 	bicge.w	r1, r1, #4
 80047cc:	6021      	strge	r1, [r4, #0]
 80047ce:	b90d      	cbnz	r5, 80047d4 <_printf_i+0x110>
 80047d0:	2e00      	cmp	r6, #0
 80047d2:	d04b      	beq.n	800486c <_printf_i+0x1a8>
 80047d4:	4616      	mov	r6, r2
 80047d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80047da:	fb03 5711 	mls	r7, r3, r1, r5
 80047de:	5dc7      	ldrb	r7, [r0, r7]
 80047e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047e4:	462f      	mov	r7, r5
 80047e6:	42bb      	cmp	r3, r7
 80047e8:	460d      	mov	r5, r1
 80047ea:	d9f4      	bls.n	80047d6 <_printf_i+0x112>
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d10b      	bne.n	8004808 <_printf_i+0x144>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	07df      	lsls	r7, r3, #31
 80047f4:	d508      	bpl.n	8004808 <_printf_i+0x144>
 80047f6:	6923      	ldr	r3, [r4, #16]
 80047f8:	6861      	ldr	r1, [r4, #4]
 80047fa:	4299      	cmp	r1, r3
 80047fc:	bfde      	ittt	le
 80047fe:	2330      	movle	r3, #48	@ 0x30
 8004800:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004804:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004808:	1b92      	subs	r2, r2, r6
 800480a:	6122      	str	r2, [r4, #16]
 800480c:	f8cd a000 	str.w	sl, [sp]
 8004810:	464b      	mov	r3, r9
 8004812:	aa03      	add	r2, sp, #12
 8004814:	4621      	mov	r1, r4
 8004816:	4640      	mov	r0, r8
 8004818:	f7ff fee6 	bl	80045e8 <_printf_common>
 800481c:	3001      	adds	r0, #1
 800481e:	d14a      	bne.n	80048b6 <_printf_i+0x1f2>
 8004820:	f04f 30ff 	mov.w	r0, #4294967295
 8004824:	b004      	add	sp, #16
 8004826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	f043 0320 	orr.w	r3, r3, #32
 8004830:	6023      	str	r3, [r4, #0]
 8004832:	4833      	ldr	r0, [pc, #204]	@ (8004900 <_printf_i+0x23c>)
 8004834:	2778      	movs	r7, #120	@ 0x78
 8004836:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	6831      	ldr	r1, [r6, #0]
 800483e:	061f      	lsls	r7, r3, #24
 8004840:	f851 5b04 	ldr.w	r5, [r1], #4
 8004844:	d402      	bmi.n	800484c <_printf_i+0x188>
 8004846:	065f      	lsls	r7, r3, #25
 8004848:	bf48      	it	mi
 800484a:	b2ad      	uxthmi	r5, r5
 800484c:	6031      	str	r1, [r6, #0]
 800484e:	07d9      	lsls	r1, r3, #31
 8004850:	bf44      	itt	mi
 8004852:	f043 0320 	orrmi.w	r3, r3, #32
 8004856:	6023      	strmi	r3, [r4, #0]
 8004858:	b11d      	cbz	r5, 8004862 <_printf_i+0x19e>
 800485a:	2310      	movs	r3, #16
 800485c:	e7ac      	b.n	80047b8 <_printf_i+0xf4>
 800485e:	4827      	ldr	r0, [pc, #156]	@ (80048fc <_printf_i+0x238>)
 8004860:	e7e9      	b.n	8004836 <_printf_i+0x172>
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	f023 0320 	bic.w	r3, r3, #32
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	e7f6      	b.n	800485a <_printf_i+0x196>
 800486c:	4616      	mov	r6, r2
 800486e:	e7bd      	b.n	80047ec <_printf_i+0x128>
 8004870:	6833      	ldr	r3, [r6, #0]
 8004872:	6825      	ldr	r5, [r4, #0]
 8004874:	6961      	ldr	r1, [r4, #20]
 8004876:	1d18      	adds	r0, r3, #4
 8004878:	6030      	str	r0, [r6, #0]
 800487a:	062e      	lsls	r6, r5, #24
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	d501      	bpl.n	8004884 <_printf_i+0x1c0>
 8004880:	6019      	str	r1, [r3, #0]
 8004882:	e002      	b.n	800488a <_printf_i+0x1c6>
 8004884:	0668      	lsls	r0, r5, #25
 8004886:	d5fb      	bpl.n	8004880 <_printf_i+0x1bc>
 8004888:	8019      	strh	r1, [r3, #0]
 800488a:	2300      	movs	r3, #0
 800488c:	6123      	str	r3, [r4, #16]
 800488e:	4616      	mov	r6, r2
 8004890:	e7bc      	b.n	800480c <_printf_i+0x148>
 8004892:	6833      	ldr	r3, [r6, #0]
 8004894:	1d1a      	adds	r2, r3, #4
 8004896:	6032      	str	r2, [r6, #0]
 8004898:	681e      	ldr	r6, [r3, #0]
 800489a:	6862      	ldr	r2, [r4, #4]
 800489c:	2100      	movs	r1, #0
 800489e:	4630      	mov	r0, r6
 80048a0:	f7fb fc9e 	bl	80001e0 <memchr>
 80048a4:	b108      	cbz	r0, 80048aa <_printf_i+0x1e6>
 80048a6:	1b80      	subs	r0, r0, r6
 80048a8:	6060      	str	r0, [r4, #4]
 80048aa:	6863      	ldr	r3, [r4, #4]
 80048ac:	6123      	str	r3, [r4, #16]
 80048ae:	2300      	movs	r3, #0
 80048b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048b4:	e7aa      	b.n	800480c <_printf_i+0x148>
 80048b6:	6923      	ldr	r3, [r4, #16]
 80048b8:	4632      	mov	r2, r6
 80048ba:	4649      	mov	r1, r9
 80048bc:	4640      	mov	r0, r8
 80048be:	47d0      	blx	sl
 80048c0:	3001      	adds	r0, #1
 80048c2:	d0ad      	beq.n	8004820 <_printf_i+0x15c>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	079b      	lsls	r3, r3, #30
 80048c8:	d413      	bmi.n	80048f2 <_printf_i+0x22e>
 80048ca:	68e0      	ldr	r0, [r4, #12]
 80048cc:	9b03      	ldr	r3, [sp, #12]
 80048ce:	4298      	cmp	r0, r3
 80048d0:	bfb8      	it	lt
 80048d2:	4618      	movlt	r0, r3
 80048d4:	e7a6      	b.n	8004824 <_printf_i+0x160>
 80048d6:	2301      	movs	r3, #1
 80048d8:	4632      	mov	r2, r6
 80048da:	4649      	mov	r1, r9
 80048dc:	4640      	mov	r0, r8
 80048de:	47d0      	blx	sl
 80048e0:	3001      	adds	r0, #1
 80048e2:	d09d      	beq.n	8004820 <_printf_i+0x15c>
 80048e4:	3501      	adds	r5, #1
 80048e6:	68e3      	ldr	r3, [r4, #12]
 80048e8:	9903      	ldr	r1, [sp, #12]
 80048ea:	1a5b      	subs	r3, r3, r1
 80048ec:	42ab      	cmp	r3, r5
 80048ee:	dcf2      	bgt.n	80048d6 <_printf_i+0x212>
 80048f0:	e7eb      	b.n	80048ca <_printf_i+0x206>
 80048f2:	2500      	movs	r5, #0
 80048f4:	f104 0619 	add.w	r6, r4, #25
 80048f8:	e7f5      	b.n	80048e6 <_printf_i+0x222>
 80048fa:	bf00      	nop
 80048fc:	08004c55 	.word	0x08004c55
 8004900:	08004c66 	.word	0x08004c66

08004904 <__sflush_r>:
 8004904:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800490c:	0716      	lsls	r6, r2, #28
 800490e:	4605      	mov	r5, r0
 8004910:	460c      	mov	r4, r1
 8004912:	d454      	bmi.n	80049be <__sflush_r+0xba>
 8004914:	684b      	ldr	r3, [r1, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	dc02      	bgt.n	8004920 <__sflush_r+0x1c>
 800491a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	dd48      	ble.n	80049b2 <__sflush_r+0xae>
 8004920:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004922:	2e00      	cmp	r6, #0
 8004924:	d045      	beq.n	80049b2 <__sflush_r+0xae>
 8004926:	2300      	movs	r3, #0
 8004928:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800492c:	682f      	ldr	r7, [r5, #0]
 800492e:	6a21      	ldr	r1, [r4, #32]
 8004930:	602b      	str	r3, [r5, #0]
 8004932:	d030      	beq.n	8004996 <__sflush_r+0x92>
 8004934:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	0759      	lsls	r1, r3, #29
 800493a:	d505      	bpl.n	8004948 <__sflush_r+0x44>
 800493c:	6863      	ldr	r3, [r4, #4]
 800493e:	1ad2      	subs	r2, r2, r3
 8004940:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004942:	b10b      	cbz	r3, 8004948 <__sflush_r+0x44>
 8004944:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004946:	1ad2      	subs	r2, r2, r3
 8004948:	2300      	movs	r3, #0
 800494a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800494c:	6a21      	ldr	r1, [r4, #32]
 800494e:	4628      	mov	r0, r5
 8004950:	47b0      	blx	r6
 8004952:	1c43      	adds	r3, r0, #1
 8004954:	89a3      	ldrh	r3, [r4, #12]
 8004956:	d106      	bne.n	8004966 <__sflush_r+0x62>
 8004958:	6829      	ldr	r1, [r5, #0]
 800495a:	291d      	cmp	r1, #29
 800495c:	d82b      	bhi.n	80049b6 <__sflush_r+0xb2>
 800495e:	4a2a      	ldr	r2, [pc, #168]	@ (8004a08 <__sflush_r+0x104>)
 8004960:	410a      	asrs	r2, r1
 8004962:	07d6      	lsls	r6, r2, #31
 8004964:	d427      	bmi.n	80049b6 <__sflush_r+0xb2>
 8004966:	2200      	movs	r2, #0
 8004968:	6062      	str	r2, [r4, #4]
 800496a:	04d9      	lsls	r1, r3, #19
 800496c:	6922      	ldr	r2, [r4, #16]
 800496e:	6022      	str	r2, [r4, #0]
 8004970:	d504      	bpl.n	800497c <__sflush_r+0x78>
 8004972:	1c42      	adds	r2, r0, #1
 8004974:	d101      	bne.n	800497a <__sflush_r+0x76>
 8004976:	682b      	ldr	r3, [r5, #0]
 8004978:	b903      	cbnz	r3, 800497c <__sflush_r+0x78>
 800497a:	6560      	str	r0, [r4, #84]	@ 0x54
 800497c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800497e:	602f      	str	r7, [r5, #0]
 8004980:	b1b9      	cbz	r1, 80049b2 <__sflush_r+0xae>
 8004982:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004986:	4299      	cmp	r1, r3
 8004988:	d002      	beq.n	8004990 <__sflush_r+0x8c>
 800498a:	4628      	mov	r0, r5
 800498c:	f7ff fbf2 	bl	8004174 <_free_r>
 8004990:	2300      	movs	r3, #0
 8004992:	6363      	str	r3, [r4, #52]	@ 0x34
 8004994:	e00d      	b.n	80049b2 <__sflush_r+0xae>
 8004996:	2301      	movs	r3, #1
 8004998:	4628      	mov	r0, r5
 800499a:	47b0      	blx	r6
 800499c:	4602      	mov	r2, r0
 800499e:	1c50      	adds	r0, r2, #1
 80049a0:	d1c9      	bne.n	8004936 <__sflush_r+0x32>
 80049a2:	682b      	ldr	r3, [r5, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0c6      	beq.n	8004936 <__sflush_r+0x32>
 80049a8:	2b1d      	cmp	r3, #29
 80049aa:	d001      	beq.n	80049b0 <__sflush_r+0xac>
 80049ac:	2b16      	cmp	r3, #22
 80049ae:	d11e      	bne.n	80049ee <__sflush_r+0xea>
 80049b0:	602f      	str	r7, [r5, #0]
 80049b2:	2000      	movs	r0, #0
 80049b4:	e022      	b.n	80049fc <__sflush_r+0xf8>
 80049b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ba:	b21b      	sxth	r3, r3
 80049bc:	e01b      	b.n	80049f6 <__sflush_r+0xf2>
 80049be:	690f      	ldr	r7, [r1, #16]
 80049c0:	2f00      	cmp	r7, #0
 80049c2:	d0f6      	beq.n	80049b2 <__sflush_r+0xae>
 80049c4:	0793      	lsls	r3, r2, #30
 80049c6:	680e      	ldr	r6, [r1, #0]
 80049c8:	bf08      	it	eq
 80049ca:	694b      	ldreq	r3, [r1, #20]
 80049cc:	600f      	str	r7, [r1, #0]
 80049ce:	bf18      	it	ne
 80049d0:	2300      	movne	r3, #0
 80049d2:	eba6 0807 	sub.w	r8, r6, r7
 80049d6:	608b      	str	r3, [r1, #8]
 80049d8:	f1b8 0f00 	cmp.w	r8, #0
 80049dc:	dde9      	ble.n	80049b2 <__sflush_r+0xae>
 80049de:	6a21      	ldr	r1, [r4, #32]
 80049e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80049e2:	4643      	mov	r3, r8
 80049e4:	463a      	mov	r2, r7
 80049e6:	4628      	mov	r0, r5
 80049e8:	47b0      	blx	r6
 80049ea:	2800      	cmp	r0, #0
 80049ec:	dc08      	bgt.n	8004a00 <__sflush_r+0xfc>
 80049ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049f6:	81a3      	strh	r3, [r4, #12]
 80049f8:	f04f 30ff 	mov.w	r0, #4294967295
 80049fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a00:	4407      	add	r7, r0
 8004a02:	eba8 0800 	sub.w	r8, r8, r0
 8004a06:	e7e7      	b.n	80049d8 <__sflush_r+0xd4>
 8004a08:	dfbffffe 	.word	0xdfbffffe

08004a0c <_fflush_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	690b      	ldr	r3, [r1, #16]
 8004a10:	4605      	mov	r5, r0
 8004a12:	460c      	mov	r4, r1
 8004a14:	b913      	cbnz	r3, 8004a1c <_fflush_r+0x10>
 8004a16:	2500      	movs	r5, #0
 8004a18:	4628      	mov	r0, r5
 8004a1a:	bd38      	pop	{r3, r4, r5, pc}
 8004a1c:	b118      	cbz	r0, 8004a26 <_fflush_r+0x1a>
 8004a1e:	6a03      	ldr	r3, [r0, #32]
 8004a20:	b90b      	cbnz	r3, 8004a26 <_fflush_r+0x1a>
 8004a22:	f7ff f9ad 	bl	8003d80 <__sinit>
 8004a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0f3      	beq.n	8004a16 <_fflush_r+0xa>
 8004a2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a30:	07d0      	lsls	r0, r2, #31
 8004a32:	d404      	bmi.n	8004a3e <_fflush_r+0x32>
 8004a34:	0599      	lsls	r1, r3, #22
 8004a36:	d402      	bmi.n	8004a3e <_fflush_r+0x32>
 8004a38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a3a:	f7ff fb98 	bl	800416e <__retarget_lock_acquire_recursive>
 8004a3e:	4628      	mov	r0, r5
 8004a40:	4621      	mov	r1, r4
 8004a42:	f7ff ff5f 	bl	8004904 <__sflush_r>
 8004a46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a48:	07da      	lsls	r2, r3, #31
 8004a4a:	4605      	mov	r5, r0
 8004a4c:	d4e4      	bmi.n	8004a18 <_fflush_r+0xc>
 8004a4e:	89a3      	ldrh	r3, [r4, #12]
 8004a50:	059b      	lsls	r3, r3, #22
 8004a52:	d4e1      	bmi.n	8004a18 <_fflush_r+0xc>
 8004a54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a56:	f7ff fb8b 	bl	8004170 <__retarget_lock_release_recursive>
 8004a5a:	e7dd      	b.n	8004a18 <_fflush_r+0xc>

08004a5c <__swhatbuf_r>:
 8004a5c:	b570      	push	{r4, r5, r6, lr}
 8004a5e:	460c      	mov	r4, r1
 8004a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a64:	2900      	cmp	r1, #0
 8004a66:	b096      	sub	sp, #88	@ 0x58
 8004a68:	4615      	mov	r5, r2
 8004a6a:	461e      	mov	r6, r3
 8004a6c:	da0d      	bge.n	8004a8a <__swhatbuf_r+0x2e>
 8004a6e:	89a3      	ldrh	r3, [r4, #12]
 8004a70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004a74:	f04f 0100 	mov.w	r1, #0
 8004a78:	bf14      	ite	ne
 8004a7a:	2340      	movne	r3, #64	@ 0x40
 8004a7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004a80:	2000      	movs	r0, #0
 8004a82:	6031      	str	r1, [r6, #0]
 8004a84:	602b      	str	r3, [r5, #0]
 8004a86:	b016      	add	sp, #88	@ 0x58
 8004a88:	bd70      	pop	{r4, r5, r6, pc}
 8004a8a:	466a      	mov	r2, sp
 8004a8c:	f000 f848 	bl	8004b20 <_fstat_r>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	dbec      	blt.n	8004a6e <__swhatbuf_r+0x12>
 8004a94:	9901      	ldr	r1, [sp, #4]
 8004a96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004a9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004a9e:	4259      	negs	r1, r3
 8004aa0:	4159      	adcs	r1, r3
 8004aa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004aa6:	e7eb      	b.n	8004a80 <__swhatbuf_r+0x24>

08004aa8 <__smakebuf_r>:
 8004aa8:	898b      	ldrh	r3, [r1, #12]
 8004aaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004aac:	079d      	lsls	r5, r3, #30
 8004aae:	4606      	mov	r6, r0
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	d507      	bpl.n	8004ac4 <__smakebuf_r+0x1c>
 8004ab4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	6123      	str	r3, [r4, #16]
 8004abc:	2301      	movs	r3, #1
 8004abe:	6163      	str	r3, [r4, #20]
 8004ac0:	b003      	add	sp, #12
 8004ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ac4:	ab01      	add	r3, sp, #4
 8004ac6:	466a      	mov	r2, sp
 8004ac8:	f7ff ffc8 	bl	8004a5c <__swhatbuf_r>
 8004acc:	9f00      	ldr	r7, [sp, #0]
 8004ace:	4605      	mov	r5, r0
 8004ad0:	4639      	mov	r1, r7
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	f7ff fbba 	bl	800424c <_malloc_r>
 8004ad8:	b948      	cbnz	r0, 8004aee <__smakebuf_r+0x46>
 8004ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ade:	059a      	lsls	r2, r3, #22
 8004ae0:	d4ee      	bmi.n	8004ac0 <__smakebuf_r+0x18>
 8004ae2:	f023 0303 	bic.w	r3, r3, #3
 8004ae6:	f043 0302 	orr.w	r3, r3, #2
 8004aea:	81a3      	strh	r3, [r4, #12]
 8004aec:	e7e2      	b.n	8004ab4 <__smakebuf_r+0xc>
 8004aee:	89a3      	ldrh	r3, [r4, #12]
 8004af0:	6020      	str	r0, [r4, #0]
 8004af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004af6:	81a3      	strh	r3, [r4, #12]
 8004af8:	9b01      	ldr	r3, [sp, #4]
 8004afa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004afe:	b15b      	cbz	r3, 8004b18 <__smakebuf_r+0x70>
 8004b00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b04:	4630      	mov	r0, r6
 8004b06:	f000 f81d 	bl	8004b44 <_isatty_r>
 8004b0a:	b128      	cbz	r0, 8004b18 <__smakebuf_r+0x70>
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	f023 0303 	bic.w	r3, r3, #3
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	81a3      	strh	r3, [r4, #12]
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	431d      	orrs	r5, r3
 8004b1c:	81a5      	strh	r5, [r4, #12]
 8004b1e:	e7cf      	b.n	8004ac0 <__smakebuf_r+0x18>

08004b20 <_fstat_r>:
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	4d07      	ldr	r5, [pc, #28]	@ (8004b40 <_fstat_r+0x20>)
 8004b24:	2300      	movs	r3, #0
 8004b26:	4604      	mov	r4, r0
 8004b28:	4608      	mov	r0, r1
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	602b      	str	r3, [r5, #0]
 8004b2e:	f7fc f900 	bl	8000d32 <_fstat>
 8004b32:	1c43      	adds	r3, r0, #1
 8004b34:	d102      	bne.n	8004b3c <_fstat_r+0x1c>
 8004b36:	682b      	ldr	r3, [r5, #0]
 8004b38:	b103      	cbz	r3, 8004b3c <_fstat_r+0x1c>
 8004b3a:	6023      	str	r3, [r4, #0]
 8004b3c:	bd38      	pop	{r3, r4, r5, pc}
 8004b3e:	bf00      	nop
 8004b40:	200002c0 	.word	0x200002c0

08004b44 <_isatty_r>:
 8004b44:	b538      	push	{r3, r4, r5, lr}
 8004b46:	4d06      	ldr	r5, [pc, #24]	@ (8004b60 <_isatty_r+0x1c>)
 8004b48:	2300      	movs	r3, #0
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	4608      	mov	r0, r1
 8004b4e:	602b      	str	r3, [r5, #0]
 8004b50:	f7fc f8ff 	bl	8000d52 <_isatty>
 8004b54:	1c43      	adds	r3, r0, #1
 8004b56:	d102      	bne.n	8004b5e <_isatty_r+0x1a>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	b103      	cbz	r3, 8004b5e <_isatty_r+0x1a>
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	bd38      	pop	{r3, r4, r5, pc}
 8004b60:	200002c0 	.word	0x200002c0

08004b64 <_sbrk_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	4d06      	ldr	r5, [pc, #24]	@ (8004b80 <_sbrk_r+0x1c>)
 8004b68:	2300      	movs	r3, #0
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	602b      	str	r3, [r5, #0]
 8004b70:	f7fc f908 	bl	8000d84 <_sbrk>
 8004b74:	1c43      	adds	r3, r0, #1
 8004b76:	d102      	bne.n	8004b7e <_sbrk_r+0x1a>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	b103      	cbz	r3, 8004b7e <_sbrk_r+0x1a>
 8004b7c:	6023      	str	r3, [r4, #0]
 8004b7e:	bd38      	pop	{r3, r4, r5, pc}
 8004b80:	200002c0 	.word	0x200002c0

08004b84 <_init>:
 8004b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b86:	bf00      	nop
 8004b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8a:	bc08      	pop	{r3}
 8004b8c:	469e      	mov	lr, r3
 8004b8e:	4770      	bx	lr

08004b90 <_fini>:
 8004b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b92:	bf00      	nop
 8004b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b96:	bc08      	pop	{r3}
 8004b98:	469e      	mov	lr, r3
 8004b9a:	4770      	bx	lr
